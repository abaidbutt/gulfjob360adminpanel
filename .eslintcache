[{"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\index.js":"1","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\reportWebVitals.js":"2","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\theme.js":"3","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\App.js":"4","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminContext.js":"5","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminReducer.js":"6","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\Index.js":"7","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\404.js":"8","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Login.js":"9","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobView.js":"10","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerUpsert.js":"11","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceUpsert.js":"12","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\config\\index.js":"13","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Title.js":"14","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobUpsert.js":"15","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationUpsert.js":"16","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqUpsert.js":"17","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationUpsert.js":"18","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryUpsert.js":"19","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipUpsert.js":"20","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryUpsert.js":"21","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Orders.js":"22","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Chart.js":"23","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsUpsert.js":"24","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Partner\\Index.js":"25","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Service\\Index.js":"26","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Job\\Index.js":"27","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Faq\\Index.js":"28","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Location\\Index.js":"29","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Industry\\Index.js":"30","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Education\\Index.js":"31","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Category\\Index.js":"32","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Tip\\Index.js":"33","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Ads\\Index.js":"34","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\dashboard\\index.js":"35","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerTable.js":"36","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceTable.js":"37","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobTable.js":"38","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqTable.js":"39","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationTable.js":"40","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsTable.js":"41","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipTable.js":"42","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryTable.js":"43","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationTable.js":"44","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryTable.js":"45","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\MenuBar.js":"46","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerDel.js":"47","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceDel.js":"48","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobDel.js":"49","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqDel.js":"50","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationDel.js":"51","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsDel.js":"52","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipDel.js":"53","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryDel.js":"54","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationDel.js":"55","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryDel.js":"56","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\menuItems.js":"57"},{"size":1068,"mtime":1613632690831,"results":"58","hashOfConfig":"59"},{"size":362,"mtime":499162500000,"results":"60","hashOfConfig":"59"},{"size":2731,"mtime":1613543894003,"results":"61","hashOfConfig":"59"},{"size":1932,"mtime":1613635234580,"results":"62","hashOfConfig":"59"},{"size":5595,"mtime":1613554191326,"results":"63","hashOfConfig":"59"},{"size":1362,"mtime":1613466129032,"results":"64","hashOfConfig":"59"},{"size":5381,"mtime":1613632726208,"results":"65","hashOfConfig":"59"},{"size":1666,"mtime":1612886373952,"results":"66","hashOfConfig":"59"},{"size":4335,"mtime":1613381833995,"results":"67","hashOfConfig":"59"},{"size":6912,"mtime":1613479598097,"results":"68","hashOfConfig":"59"},{"size":6389,"mtime":1613557056455,"results":"69","hashOfConfig":"59"},{"size":9017,"mtime":1613544255414,"results":"70","hashOfConfig":"59"},{"size":1598,"mtime":1613624161043,"results":"71","hashOfConfig":"59"},{"size":423,"mtime":1612859119944,"results":"72","hashOfConfig":"59"},{"size":21588,"mtime":1613480709455,"results":"73","hashOfConfig":"59"},{"size":5889,"mtime":1613480632730,"results":"74","hashOfConfig":"59"},{"size":7457,"mtime":1613480850486,"results":"75","hashOfConfig":"59"},{"size":4990,"mtime":1613480259543,"results":"76","hashOfConfig":"59"},{"size":5130,"mtime":1613480981600,"results":"77","hashOfConfig":"59"},{"size":7335,"mtime":1613480782202,"results":"78","hashOfConfig":"59"},{"size":7010,"mtime":1613555280390,"results":"79","hashOfConfig":"59"},{"size":3743,"mtime":1613465833731,"results":"80","hashOfConfig":"59"},{"size":1790,"mtime":1612604709341,"results":"81","hashOfConfig":"59"},{"size":5559,"mtime":1613630248076,"results":"82","hashOfConfig":"59"},{"size":3505,"mtime":1613466329328,"results":"83","hashOfConfig":"59"},{"size":3543,"mtime":1613466334669,"results":"84","hashOfConfig":"59"},{"size":3618,"mtime":1613466310278,"results":"85","hashOfConfig":"59"},{"size":3501,"mtime":1613466297233,"results":"86","hashOfConfig":"59"},{"size":3412,"mtime":1613466316379,"results":"87","hashOfConfig":"59"},{"size":3413,"mtime":1613466304062,"results":"88","hashOfConfig":"59"},{"size":3418,"mtime":1613466290106,"results":"89","hashOfConfig":"59"},{"size":3408,"mtime":1613466281382,"results":"90","hashOfConfig":"59"},{"size":3500,"mtime":1613466344685,"results":"91","hashOfConfig":"59"},{"size":3579,"mtime":1613463694214,"results":"92","hashOfConfig":"59"},{"size":5968,"mtime":1613467859393,"results":"93","hashOfConfig":"59"},{"size":2098,"mtime":1613467294826,"results":"94","hashOfConfig":"59"},{"size":1936,"mtime":1613466256033,"results":"95","hashOfConfig":"59"},{"size":2223,"mtime":1613474979994,"results":"96","hashOfConfig":"59"},{"size":1910,"mtime":1613466224136,"results":"97","hashOfConfig":"59"},{"size":1834,"mtime":1613466239651,"results":"98","hashOfConfig":"59"},{"size":1880,"mtime":1613463718290,"results":"99","hashOfConfig":"59"},{"size":1910,"mtime":1613466261141,"results":"100","hashOfConfig":"59"},{"size":1823,"mtime":1613466212424,"results":"101","hashOfConfig":"59"},{"size":1864,"mtime":1613466218077,"results":"102","hashOfConfig":"59"},{"size":1858,"mtime":1613466229285,"results":"103","hashOfConfig":"59"},{"size":3259,"mtime":1613556634730,"results":"104","hashOfConfig":"59"},{"size":1379,"mtime":1613380635908,"results":"105","hashOfConfig":"59"},{"size":1383,"mtime":1613380640699,"results":"106","hashOfConfig":"59"},{"size":1333,"mtime":1613380619392,"results":"107","hashOfConfig":"59"},{"size":1364,"mtime":1613380592663,"results":"108","hashOfConfig":"59"},{"size":1384,"mtime":1613380624731,"results":"109","hashOfConfig":"59"},{"size":1487,"mtime":1613466081534,"results":"110","hashOfConfig":"59"},{"size":1368,"mtime":1613380646277,"results":"111","hashOfConfig":"59"},{"size":1385,"mtime":1613380606361,"results":"112","hashOfConfig":"59"},{"size":1388,"mtime":1613380597700,"results":"113","hashOfConfig":"59"},{"size":1385,"mtime":1613380586817,"results":"114","hashOfConfig":"59"},{"size":4896,"mtime":1613632720286,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"nac9k1",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"118"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"118"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"118"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"118"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"118"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"118"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"118"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"118"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"118"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"118"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"118"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"118"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"118"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"118"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"118"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"118"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"118"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"118"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"118"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"118"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"118"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"118"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"118"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"118"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"118"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"118"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"118"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\index.js",[],["268","269"],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\reportWebVitals.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\theme.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\App.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminContext.js",["270","271"],"import { useEffect, useMemo } from \"react\";\r\nimport { createContext, useReducer } from \"react\";\r\nimport adminReducer, { initState } from \"./AdminReducer\";\r\nimport Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const AdminContext = createContext();\r\n\r\nconst AdminProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(adminReducer, initState);\r\n\r\n  useEffect(() => {\r\n    console.log(state.error);\r\n    if (state.error) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n    return () => dispatch({ type: \"ERROR\", payload: \"\" });\r\n  }, [state?.error]);\r\n  // useEffect(() => {\r\n  //   console.log(state);\r\n  // });\r\n  async function handleFetch(routeName, rsl, rej) {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const { data } = response.data;\r\n\r\n      rsl(data);\r\n    } catch (err) {\r\n      rej(err.response);\r\n    }\r\n  }\r\n\r\n  async function fetchData(routeName, perPage, page) {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const res = response.data;\r\n\r\n      const { data, current_page, last_page, total } = res;\r\n      if (res) {\r\n        dispatch({\r\n          type: \"RESULTS\",\r\n          payload: { data, details: { current_page, last_page, total } },\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n    }\r\n\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  }\r\n\r\n  const handleDelete = async (routeName, delId) => {\r\n    try {\r\n      console.log(delId);\r\n      const response = await Axios.delete(routeName);\r\n      const res = response.data;\r\n      if (response.status === 202) {\r\n        dispatch({ type: \"DELETE\", payload: delId });\r\n        toast.success(\"Delete Successfully\");\r\n      }\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleEdit = async (routeName, values, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.put(routeName, values);\r\n      const res = response.data;\r\n\r\n      if (res.success === 1) {\r\n        dispatch({ type: \"UPDATE\", payload: res });\r\n        toast.success(\"Update Successfully\");\r\n      }\r\n\r\n      rsl();\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n      const { error } = err.response.data;\r\n      dispatch({ type: \"ERROR\", payload: error });\r\n      rej(error);\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleCreate = async (routeName, values, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.post(routeName, values);\r\n      const res = response.data;\r\n\r\n      if (response.status === 201) {\r\n        dispatch({ type: \"CREATE\", payload: res });\r\n        toast.success(\"Create Successfully\");\r\n      }\r\n      rsl();\r\n    } catch (err) {\r\n      const { error } = err.response.data;\r\n      dispatch({ type: \"ERROR\", payload: error });\r\n      rej(error);\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleGet = async (routeName, editId, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const res = response.data;\r\n\r\n      dispatch({ type: \"GET\" });\r\n      rsl(res);\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n      rej();\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleCategory = async (routeName, type, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const res = response.data;\r\n\r\n      rsl(res.data);\r\n\r\n      dispatch({ type: \"CATEGORY\" });\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response.error.data });\r\n      rej();\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  async function loginUser(routeName, credentials, rsl, rej) {\r\n    try {\r\n      const response = await Axios.post(routeName, credentials);\r\n      const res = response.data;\r\n      if (response.status === 202) {\r\n        dispatch({ type: \"LOGIN\", payload: res.success });\r\n        toast.success(\"Login Successfully\");\r\n      }\r\n      rsl(res.success.token);\r\n    } catch (err) {\r\n      // dispatch({ type: \"ERROR\", payload: err.response });\r\n      rej(err.response);\r\n    }\r\n  }\r\n  async function logoutUser(routeName, credentials, rsl, rej) {\r\n    dispatch({ type: \"LOGOUT\" });\r\n    toast(\"Logout Successfully\");\r\n  }\r\n  // useEffect(() => {\r\n  //   fetchData(dataSource);\r\n  // }, [dataSource]);\r\n  return useMemo(() => {\r\n    return (\r\n      <AdminContext.Provider\r\n        value={{\r\n          ctxLoad: state.loading,\r\n          ctxDetails: state.details,\r\n          ctxResults: state.results,\r\n          ctxUser: state.user,\r\n          fetchData,\r\n          handleDelete,\r\n          handleEdit,\r\n          handleCreate,\r\n          handleGet,\r\n          handleCategory,\r\n          handleFetch,\r\n          loginUser,\r\n          logoutUser,\r\n        }}\r\n      >\r\n        {children}\r\n      </AdminContext.Provider>\r\n    );\r\n  }, [state, dispatch]);\r\n\r\n  // return (\r\n  //   <AdminContext.Provider\r\n  //     value={{\r\n  //       ctxLoad: state.loading,\r\n  //       ctxDetails: state.details,\r\n  //       ctxResults: state.results,\r\n  //       ctxUser: state.user,\r\n  //       fetchData,\r\n  //       handleDelete,\r\n  //       handleEdit,\r\n  //       handleCreate,\r\n  //       handleGet,\r\n  //       handleCategory,\r\n  //       handleFetch,\r\n  //       loginUser,\r\n  //       logoutUser,\r\n  //     }}\r\n  //   >\r\n  //     {children}\r\n  //   </AdminContext.Provider>\r\n  // );\r\n};\r\n\r\nexport default AdminProvider;\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminReducer.js",["272","273","274","275","276","277","278","279","280","281"],"export const initState = {\r\n  user: JSON.parse(localStorage.getItem(\"credentials\")) || null,\r\n  results: [],\r\n  loading: true,\r\n  error: \"\",\r\n  details: {},\r\n};\r\n\r\nexport default (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOGIN\":\r\n      const { token, user } = payload;\r\n      localStorage.setItem(\"credentials\", JSON.stringify(payload));\r\n      return { ...state, user: user };\r\n      break;\r\n    case \"LOGOUT\":\r\n      localStorage.clear();\r\n      return { ...state, user: null };\r\n      break;\r\n    case \"CREATE\":\r\n      console.log(payload);\r\n      return { ...state, loading: payload, error: \"\" };\r\n      break;\r\n    case \"LOADING\":\r\n      return { ...state, loading: payload, error: \"\" };\r\n      break;\r\n    case \"ERROR\":\r\n      return { ...state, error: payload, loading: false };\r\n      break;\r\n    case \"RESULTS\":\r\n      const { data, details } = payload;\r\n      return {\r\n        ...state,\r\n        results: data,\r\n        details: details,\r\n        loading: false,\r\n        error: \"\",\r\n      };\r\n      break;\r\n    case \"DELETE\":\r\n      console.log(payload)\r\n      return {\r\n        ...state,\r\n        results: state.results.filter((res) => res.id !== payload),\r\n      };\r\n      break;\r\n\r\n    default:\r\n      // const token=localStorage.getItem('token')\r\n      // JSON.parse(token)\r\n      return { ...state };\r\n      break;\r\n  }\r\n};\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\Index.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\404.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Login.js",["282","283"],"import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  TextField,\r\n  Box,\r\n  Typography,\r\n  Container,\r\n  FormHelperText,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { LockOutlined } from \"@material-ui/icons\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { BaseUrl } from \"../config\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { AdminContext } from \"../context/AdminContext\";\r\n\r\n\r\nexport default function Login() {\r\n  \r\n  const { loginUser } = useContext(AdminContext);\r\n  const [msg, setMsg] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n\r\n  const handleLogin = (data) => {\r\n    console.log(data);\r\n    new Promise((rsl, rej) => {\r\n      loginUser(`${BaseUrl}/admin-login`, data, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        history.push(\"/admin\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlined />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Admin Panel Log In{\" \"}\r\n        </Typography>\r\n\r\n        <form className={classes.form} onSubmit={handleSubmit(handleLogin)}>\r\n          <div className={classes.input}>\r\n            <TextField\r\n              autoFocus\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              inputRef={register({\r\n                required: \"This Field is Required\",\r\n              })}\r\n              error={errors.email ? true : false}\r\n            />\r\n\r\n            <FormHelperText error>{errors.email?.message}</FormHelperText>\r\n          </div>\r\n          <div className={classes.input}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              inputRef={register({\r\n                required: \"This Field is Required\",\r\n              })}\r\n              error={errors.password ? true : false}\r\n            />\r\n\r\n            <FormHelperText error>{errors.password?.message}</FormHelperText>\r\n          </div>\r\n          {/* <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          /> */}\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Log In\r\n          </Button>\r\n          {/* <Grid container>\r\n            <Grid item xs>\r\n            <Link to=\"#\" variant=\"body2\">\r\n            Forgot password?\r\n            </Link>\r\n            </Grid>\r\n            <Grid item>\r\n            <Link to=\"/\" variant=\"body2\">\r\n            {\"Don't have an account? Sign Up\"}\r\n            </Link>\r\n            </Grid>\r\n          </Grid> */}\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"GulfJobs360\"}{\" \"}\r\n      <Link color=\"inherit\" to=\"/\">\r\n        View Website\r\n      </Link>\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8 * 2),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    background: \"white\",\r\n    padding: \"25px\",\r\n    borderRadius: \"25px\",\r\n  },\r\n  input:{\r\n    marginTop:theme.spacing(2)\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobView.js",["284","285","286","287","288","289","290"],"import React, { useEffect, useContext, useCallback, useState } from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../Title\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    backgroundColor: theme.palette.background.default,\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\nexport default function Orders() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults, handleGet } = useContext(\r\n    AdminContext\r\n  );\r\n  const [viewData, setViewData] = useState({});\r\n  const { viewId } = useParams();\r\n  //   const crtPage = ctxDetails.current_page;\r\n\r\n  //   const handleChange = useCallback((event, value) => {\r\n  //     fetchData(\r\n  //       `http://gulfjobs.nwsols.com/api/users?per_page=${10}&page=${value}`\r\n  //     );\r\n  //   }, []);\r\n\r\n  useEffect(() => {\r\n    if (viewId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(\r\n          `http://gulfjobs.nwsols.com/api/jobs/${viewId}`,\r\n          viewId,\r\n          rsl,\r\n          rej\r\n        );\r\n      })\r\n        .then((res) => {\r\n          setViewData(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <Title className={classes.title}>Jobs Details </Title>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell></StyledTableCell>\r\n                  <StyledTableCell></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow>\r\n                  <StyledTableCell>Title</StyledTableCell>\r\n                  <TableCell>{viewData.title}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Description</StyledTableCell>\r\n                  <TableCell>{viewData.description}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Other Benefits</StyledTableCell>\r\n                  <TableCell>{viewData.other_benifits}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Total Seats</StyledTableCell>\r\n                  <TableCell>{viewData.total_seats}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <TableCell>\r\n                    {viewData.status === 0 ? \"In-Active\" : \"Active\"}\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Max Salary</StyledTableCell>\r\n                  <TableCell>{viewData.max_salary}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Min Salary</StyledTableCell>\r\n                  <TableCell>{viewData.min_salary}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Industry</StyledTableCell>\r\n                  <TableCell>{viewData.industry_type}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Job Location</StyledTableCell>\r\n                  <TableCell>{viewData.job_location}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Current Location</StyledTableCell>\r\n                  <TableCell>{viewData.current_location}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Experince From</StyledTableCell>\r\n                  <TableCell>{viewData.experince_from}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Job Faq</StyledTableCell>\r\n                  <TableCell>{viewData.job_faq}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Nationality</StyledTableCell>\r\n                  <TableCell>{viewData.nationality}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Gender</StyledTableCell>\r\n                  <TableCell>{viewData.gender}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Company</StyledTableCell>\r\n                  <TableCell>{viewData.company_id}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Created At</StyledTableCell>\r\n                  <TableCell>{viewData.created_at}</TableCell>\r\n                </TableRow>\r\n                {/* {ctxResults.map((row, index) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {index + 1 + (crtPage > 1 ? crtPage * 10 - 10 : 0)}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {row.first_name} {row.last_name}\r\n                    </TableCell>\r\n                    <TableCell>{row.email}</TableCell>\r\n                    <TableCell>{row.mobile_number}</TableCell>\r\n                    <TableCell >\r\n                      <Moment\r\n                        date={row.created_at.split(\"T\")[0].replace(/-/g, \"\")}\r\n                        fromNow\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))} */}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            {/* <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            /> */}\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerUpsert.js",["291","292","293","294","295","296"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { DropzoneDialog } from \"material-ui-dropzone\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const [fileOpen, setFileOpen] = useState(false);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    image: [],\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/partners/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, description, image } = res;\r\n          const formData = {\r\n            name,\r\n            description,\r\n            image,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n  function handleClose() {\r\n    setFileOpen(false);\r\n  }\r\n\r\n  function handleSave(files) {\r\n    setFileOpen(false);\r\n\r\n    setValues({ ...values, image: files });\r\n  }\r\n\r\n  function handleOpen() {\r\n    setFileOpen(true);\r\n  }\r\n\r\n  // const openFile = (event) => {\r\n  //   const input = event.target;\r\n\r\n  //   const reader = new FileReader();\r\n  //   reader.onload = function () {\r\n  //     const dataURL = reader.result;\r\n  //     const output = document.getElementById(\"output\");\r\n  //     output.src = dataURL;\r\n  //   };\r\n  //   reader.readAsDataURL(input.files[0]);\r\n  //   console.log(reader, input);\r\n  // };\r\n  const EditSubmit = async (data) => {\r\n    // console.log(data.image[0].name)\r\n    const formData = new FormData();\r\n    formData.append(\"name\", values.name);\r\n    formData.append(\"description\", values.description);\r\n    values.image = data.image[0];\r\n    formData.append(\"image\", values.image);\r\n\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/partners/${editId}`, formData, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/partners`, formData, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/partner\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Partner </Title>\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={handleSubmit(EditSubmit)}\r\n            encType=\"multipart/form-data\"\r\n          >\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"name *\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              name=\"description\"\r\n              label=\"description *\"\r\n              variant=\"outlined\"\r\n              value={values.description}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              fullWidth\r\n              margin=\"dense\"\r\n              multiline\r\n              rows={4}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.description ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.description?.message}</FormHelperText>\r\n          \r\n            <input\r\n              accept=\"image/*\"\r\n              style={{ display: \"none\" }}\r\n              id=\"contained-button-file\"\r\n              type=\"file\"\r\n              name=\"image\"\r\n              ref={register}\r\n              onChange={(e) => {\r\n                // console.log(e.target.files[0]);\r\n                setValues({ ...values, image: e.target.files[0].name });\r\n              }}\r\n            />\r\n            {/* // onChange={openFile} */}\r\n            <label htmlFor=\"contained-button-file\">\r\n              <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                Upload\r\n              </Button>\r\n            </label>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceUpsert.js",["297","298","299","300","301","302","303","304","305"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport MUIRichTextEditor from \"mui-rte\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { defaultTheme } from \"../../theme\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate, handleCategory } = useContext(\r\n    AdminContext\r\n  );\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const [category, setCategory] = useState();\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    slug: \"\",\r\n    status: \"\",\r\n    category_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors, control } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/services/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          console.log(res, editId);\r\n          const { title, description, price, status, slug, category_id } = res;\r\n          const formData = {\r\n            title,\r\n            description,\r\n            price,\r\n            status,\r\n            slug,\r\n            category_id,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"services\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"services\");\r\n        setCategory(cateGory);\r\n        console.log(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        console.log(values);\r\n        handleEdit(`${BaseUrl}/services/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/services`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/service\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n        console.log(err);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    console.log(errors);\r\n  });\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Service </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Service Title *\"\r\n              name=\"title\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              fullWidth\r\n              value={values.title}\r\n              onChange={handleChange}\r\n              error={errors.title ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.title?.message}</FormHelperText>\r\n            {errMsg?.title.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n       \r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Service Description *\"\r\n              name=\"description\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              value={values.description}\r\n              multiline\r\n              rows={3}\r\n              onChange={handleChange}\r\n              error={errors.description ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.description?.message}</FormHelperText>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Service Price *\"\r\n              margin=\"dense\"\r\n              name=\"price\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={values.price}\r\n              onChange={handleChange}\r\n              error={errors.price ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.price?.message}</FormHelperText>\r\n\r\n            <TextField\r\n              name=\"slug\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              label=\"Service Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n\r\n            <TextField\r\n              label=\"status\"\r\n              select\r\n              name=\"status\"\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              inputProps={{\r\n                inputRef: () =>\r\n                  register({\r\n                    required: \"Thisi s Required\",\r\n                  }),\r\n              }}\r\n              onChange={handleChange}\r\n              value={values.status}\r\n              fullWidth\r\n              error={errors.status ? true : false}\r\n            >\r\n              <MenuItem value={0}>In-Active</MenuItem>\r\n              <MenuItem value={1}>Active</MenuItem>\r\n            </TextField>\r\n\r\n            <FormHelperText error>{errors.status?.message}</FormHelperText>\r\n\r\n            <TextField\r\n              label=\"Service Category\"\r\n              select\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              name=\"category_id\"\r\n              onChange={handleChange}\r\n              // inputProps={{\r\n              //   inputRef: (ref) => {\r\n              //     if (!ref) return;\r\n              //     register({\r\n              //       name: \"status\",\r\n              //       value: ref.value,\r\n              //       required: \"Thisis Required\",\r\n              //     });\r\n              //   },\r\n              // }}\r\n              value={values.category_id}\r\n              fullWidth\r\n              error={errors.category_id ? true : false}\r\n            >\r\n              <MenuItem value={values.category_id}></MenuItem>\r\n              {category &&\r\n                category.map((ctg, i) => (\r\n                  <MenuItem value={ctg.id} key={i}>\r\n                    {ctg.name}\r\n                  </MenuItem>\r\n                ))}\r\n            </TextField>\r\n\r\n            <FormHelperText error>{errors.category_id?.message}</FormHelperText>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\config\\index.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Title.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobUpsert.js",["306","307","308","309","310","311","312","313"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\n\r\nconst currencies = [\r\n  {\r\n    name: \"US\",\r\n    value: \"\\u0024\",\r\n  },\r\n  {\r\n    name: \"Cent\",\r\n    value: \"\\u00A2\",\r\n  },\r\n  {\r\n    name: \"Pound\",\r\n    value: \"\\u00A3\",\r\n  },\r\n  {\r\n    name: \"EURO\",\r\n    value: \"\\u20A0\",\r\n  },\r\n  {\r\n    name: \"YEN\",\r\n    value: \"\\u00A5\",\r\n  },\r\n];\r\nconst gender = [\r\n  { name: \"male\", value: \"male\" },\r\n  { name: \"female\", value: \"female\" },\r\n  { name: \"no-preference\", value: \"no-preference\" },\r\n];\r\n\r\nexport default function JobUpsert() {\r\n  const [location, setLocation] = useState([]);\r\n  const [industry, setIndustry] = useState([]);\r\n  const [educations, setEducations] = useState([]);\r\n  const [employeries, setEmployers] = useState([]);\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const {\r\n    handleEdit,\r\n    handleGet,\r\n    handleCreate,\r\n    handleCategory,\r\n    handleFetch,\r\n  } = useContext(AdminContext);\r\n  const [categories, setCategories] = useState();\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    job_location: \"\",\r\n    currency: \"$\",\r\n    min_salry: \"\",\r\n    max_salary: \"\",\r\n    other_benifits: \"\",\r\n    total_seats: \"\",\r\n    category_id: \"\",\r\n    industry_type: \"\",\r\n    functional_area: \"\",\r\n    gender: \"\",\r\n    experince_from: \"\",\r\n    experince_to: \"\",\r\n    nationality: \"\",\r\n    current_location: \"\",\r\n    education: \"\",\r\n    job_faq: \"\",\r\n    company_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n\r\n  function fetchLocation() {\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/locations`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setLocation(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/industries`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setIndustry(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/educations`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setEducations(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/employers`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setEmployers(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchLocation();\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/jobs/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          console.log(res, editId);\r\n          const {\r\n            title,\r\n            description,\r\n            job_location,\r\n            currency,\r\n            min_salry,\r\n            max_salary,\r\n            other_benifits,\r\n            total_seats,\r\n            category_id,\r\n            industry_type,\r\n            functional_area,\r\n            gender,\r\n            experince_from,\r\n            experince_to,\r\n            nationality,\r\n            current_location,\r\n            education,\r\n            job_faq,\r\n            company_id,\r\n          } = res;\r\n          const formData = {\r\n            title,\r\n            description,\r\n            job_location,\r\n            currency,\r\n            min_salry,\r\n            max_salary,\r\n            other_benifits,\r\n            total_seats,\r\n            category_id,\r\n            industry_type,\r\n            functional_area,\r\n            gender,\r\n            experince_from,\r\n            experince_to,\r\n            nationality,\r\n            current_location,\r\n            education,\r\n            job_faq,\r\n            company_id,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"jobs\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"jobs\");\r\n        setCategories(cateGory);\r\n        console.log(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/jobs/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/jobs`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/job\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\">\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Job </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"title\"\r\n                  label=\"Job Title\"\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  autoComplete=\"shipping address-line2\"\r\n                  value={values.title}\r\n                  inputRef={register({ required: \"Title Required\" })}\r\n                  error={errors.title ? true : false}\r\n                />\r\n                <FormHelperText error>{errors.title?.message}</FormHelperText>\r\n                {errMsg?.title.map((err) => (\r\n                  <FormHelperText error> {err}</FormHelperText>\r\n                ))}\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"description\"\r\n                  label=\"Job Description\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  value={values.description}\r\n                  variant=\"outlined\"\r\n                  inputRef={register({ required: \"Description Required\" })}\r\n                  error={errors.description ? true : false}\r\n                />\r\n                <FormHelperText error>\r\n                  {errors.description?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      label=\"Currency\"\r\n                      select\r\n                      variant=\"outlined\"\r\n                      inputProps={{\r\n                        inputRef: (ref) => {\r\n                          if (!ref) return;\r\n                          register({\r\n                            name: \"currency\",\r\n                            value: ref.value,\r\n                          });\r\n                        },\r\n                        onChange: (e) => {\r\n                          const { currency } = values;\r\n\r\n                          setValues({\r\n                            ...values,\r\n                            currency: e.target.value,\r\n                          });\r\n                        },\r\n                      }}\r\n                      value={values.currency}\r\n                      fullWidth\r\n                      inputRef={register}\r\n                      error={errors.currency ? true : false}\r\n                    >\r\n                      {currencies.map((ctg, i) => (\r\n                        <MenuItem value={ctg.name} key={i}>\r\n                          {ctg.value}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      color=\"secondary\"\r\n                      name=\"min_salry\"\r\n                      value={values.min_salry}\r\n                      label=\"Min Salary\"\r\n                      onChange={handleChange}\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      inputRef={register}\r\n                      error={errors.min_salry ? true : false}\r\n                    />\r\n                    <FormHelperText error>\r\n                      {errors.min_salry?.message}\r\n                    </FormHelperText>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      color=\"secondary\"\r\n                      name=\"max_salary\"\r\n                      label=\"Max Salary\"\r\n                      value={values.max_salary}\r\n                      onChange={handleChange}\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      inputRef={register}\r\n                      error={errors.max_salary ? true : false}\r\n                    />\r\n                    <FormHelperText error>\r\n                      {errors.max_salary?.message}\r\n                    </FormHelperText>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"other_benifits\"\r\n                  label=\"Other Benifits\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  value={values.other_benifits}\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  name=\"total_seats\"\r\n                  label=\"Total Seats\"\r\n                  color=\"secondary\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.total_seats}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                  error={errors.total_seats ? true : false}\r\n                />\r\n                <FormHelperText error>\r\n                  {errors.total_seats?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Industry\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"industry_type\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { industry_type } = values;\r\n\r\n                      setValues({ ...values, industry_type: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.industry_type}\r\n                  fullWidth\r\n                  error={errors.industry_type ? true : false}\r\n                >\r\n                  {industry &&\r\n                    industry.map((indust) => (\r\n                      <MenuItem value={indust.id} key={indust.id}>\r\n                        {indust.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.industry_type?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Location\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"job_location\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { job_location } = values;\r\n\r\n                      setValues({ ...values, job_location: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.job_location}\r\n                  fullWidth\r\n                  error={errors.job_location ? true : false}\r\n                >\r\n                  {location &&\r\n                    location.map((loc) => (\r\n                      <MenuItem value={loc.id} key={loc.id}>\r\n                        {loc.location_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.job_location?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"gender\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"gender\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { gender } = values;\r\n\r\n                      setValues({ ...values, gender: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.gender}\r\n                  fullWidth\r\n                  error={errors.gender ? true : false}\r\n                >\r\n                  {gender &&\r\n                    gender.map((indust, i) => (\r\n                      <MenuItem value={indust.value} key={i}>\r\n                        {indust.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>{errors.gender?.message}</FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"current_location\"\r\n                  label=\"Current Location \"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.current_location}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"experince_from\"\r\n                  label=\"Experience From \"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.experince_from}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"experince_to\"\r\n                  label=\"Experience To\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.experince_to}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"nationality\"\r\n                  label=\"Nationality\"\r\n                  fullWidth\r\n                  onChange={handleChange}\r\n                  value={values.nationality}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"education\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"education\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { education } = values;\r\n\r\n                      setValues({ ...values, education: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.education}\r\n                  fullWidth\r\n                  error={errors.education ? true : false}\r\n                >\r\n                  {educations &&\r\n                    educations.map((edu, i) => (\r\n                      <MenuItem value={edu.id} key={i}>\r\n                        {edu.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.education?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"job_faq\"\r\n                  label=\"Job FAQ\"\r\n                  multiline\r\n                  onChange={handleChange}\r\n                  rows={2}\r\n                  value={values.job_faq}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"company_id\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"company_id\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { company_id } = values;\r\n\r\n                      setValues({ ...values, company_id: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.company_id}\r\n                  fullWidth\r\n                  error={errors.company_id ? true : false}\r\n                >\r\n                  {employeries &&\r\n                    employeries.map((emp, i) => (\r\n                      <MenuItem value={emp.id} key={i}>\r\n                        {emp.first_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.company_id?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"category_id\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"category_id\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { category_id } = values;\r\n\r\n                      setValues({ ...values, category_id: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.category_id}\r\n                  fullWidth\r\n                  error={errors.category_id ? true : false}\r\n                >\r\n                  {categories &&\r\n                    categories.map((cat, i) => (\r\n                      <MenuItem value={cat.id} key={i}>\r\n                        {cat.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.category_id?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n            </Grid>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationUpsert.js",["314"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [errMsg, setErrMsg] = useState(null);\r\n\r\n  const [values, setValues] = useState({\r\n    location_name: \"\",\r\n    slug: \"\",\r\n    code: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/locations/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { location_name, code, slug } = res;\r\n          const formData = {\r\n            location_name,\r\n            code,\r\n            slug,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/locations/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/locations`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/location\"))\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Location </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Location Name *\"\r\n              name=\"location_name\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              value={values.location_name}\r\n              onChange={handleChange}\r\n              error={errors.location_name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>\r\n              {errors.location_name?.message}\r\n            </FormHelperText>\r\n            {errMsg?.location_name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n\r\n            <TextField\r\n              name=\"code\"\r\n              label=\"Location Code *\"\r\n              variant=\"outlined\"\r\n              value={values.code}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.code ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.code?.message}</FormHelperText>\r\n            {errMsg?.code.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Location Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqUpsert.js",["315","316"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg]=useState(null)\r\n  const { handleEdit, handleGet, handleCreate, handleCategory } = useContext(\r\n    AdminContext\r\n  );\r\n  const [category, setCategory] = useState();\r\n  const [values, setValues] = useState({\r\n    heading: \"\",\r\n    description: \"\",\r\n    slug: \"\",\r\n    category_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/faqs/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          console.log(res, editId);\r\n          const { heading, description, slug, category_id } = res;\r\n          const formData = {\r\n            heading,\r\n            description,\r\n            slug,\r\n            category_id,\r\n          };\r\n          console.log(res, \"kj\");\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"faq\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"faq\");\r\n        setCategory(cateGory);\r\n        console.log(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/faqs/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/faqs`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/faq\"))\r\n      .catch((err) => {\r\n        setErrMsg(err)\r\n        console.log(err)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId?'Edit':'Add'} FAQ </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              label=\"Faq Name *\"\r\n              name=\"heading\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              value={values.heading}\r\n              onChange={handleChange}\r\n              error={errors.heading ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.heading?.message}</FormHelperText>\r\n            {errMsg?.heading.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              label=\"Faq Description *\"\r\n              name=\"description\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              value={values.description}\r\n              onChange={handleChange}\r\n              error={errors.description ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.description?.message}</FormHelperText>\r\n\r\n            <TextField\r\n              name=\"slug\"\r\n              margin=\"dense\"\r\n              label=\"Faq Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            \r\n              <TextField\r\n                label=\"Faq Category\"\r\n                margin=\"dense\"\r\n                select\r\n                variant=\"outlined\"\r\n                inputProps={{\r\n                  inputRef: (ref) => {\r\n                    if (!ref) return;\r\n                    register({\r\n                      name: \"category_id\",\r\n                      value: ref.value,\r\n                    });\r\n                  },\r\n                  onChange: (e) => {\r\n                    const { category_id } = values;\r\n\r\n                    setValues({\r\n                      ...values,\r\n                      category_id: e.target.value,\r\n                    });\r\n                  },\r\n                }}\r\n                value={values.category_id}\r\n                fullWidth\r\n                error={errors.category_id ? true : false}\r\n              >\r\n                {/* <MenuItem></MenuItem> */}\r\n                {category && category.map((ctg, i) => (\r\n                  <MenuItem value={ctg.id} key={i}>\r\n                    {ctg.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n          \r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationUpsert.js",["317"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg] = useState(null);\r\n\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    slug: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/educations/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, slug } = res;\r\n          const formData = {\r\n            name,\r\n            slug,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    console.log(values);\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/educations/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/educations`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/education\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Education </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Education Name *\"\r\n              margin=\"dense\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              margin=\"dense\"\r\n              name=\"slug\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              label=\"Education Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryUpsert.js",["318"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    slug: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/industries/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, slug } = res;\r\n          const formData = {\r\n            name,\r\n            slug,\r\n          };\r\n          console.log(res);\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/industries/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/industries`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/industry\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Industry </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Industry Name *\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              fullWidth\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Industry Slug *\"\r\n              variant=\"outlined\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipUpsert.js",["319","320"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg]=useState(null)\r\n  const { handleEdit, handleGet, handleCreate, handleCategory } = useContext(\r\n    AdminContext\r\n  );\r\n  const [category, setCategory] = useState();\r\n  const [values, setValues] = useState({\r\n    heading: \"\",\r\n    description: \"\",\r\n    slug: \"\",\r\n    category_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/tips/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          console.log(res, editId);\r\n          const { heading, description, slug, category_id } = res;\r\n          const formData = {\r\n            heading,\r\n            description,\r\n            slug,\r\n            category_id,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"tips\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"tips\");\r\n        setCategory(cateGory);\r\n        console.log(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/tips/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/tips`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/tip\"))\r\n      .catch((err) => {\r\n        setErrMsg(err)\r\n        console.log(err)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Tips </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Tip Name *\"\r\n              name=\"heading\"\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={values.heading}\r\n              onChange={handleChange}\r\n              error={errors.heading ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.heading?.message}</FormHelperText>\r\n            {errMsg?.heading.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Tip Description *\"\r\n              name=\"description\"\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              value={values.description}\r\n              onChange={handleChange}\r\n              error={errors.description ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.description?.message}</FormHelperText>\r\n\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Tip Slug *\"\r\n              variant=\"outlined\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              margin=\"dense\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {category && (\r\n              <TextField\r\n                label=\"Tips Category Id\"\r\n                margin=\"dense\"\r\n                select\r\n                variant=\"outlined\"\r\n                inputProps={{\r\n                  inputRef: (ref) => {\r\n                    if (!ref) return;\r\n                    register({\r\n                      name: \"category_id\",\r\n                      value: ref.value,\r\n                    });\r\n                  },\r\n                  onChange: (e) => {\r\n                    const { category_id } = values;\r\n\r\n                    setValues({ ...values, category_id: e.target.value });\r\n                  },\r\n                }}\r\n                value={values.category_id}\r\n                fullWidth\r\n                error={errors.category_id ? true : false}\r\n              >\r\n                {/* <MenuItem></MenuItem> */}\r\n                {category.map((ctg, i) => (\r\n                  <MenuItem value={ctg.id} key={i}>\r\n                    {ctg.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n            )}\r\n\r\n            <FormHelperText error>{errors.category_id?.message}</FormHelperText>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryUpsert.js",["321","322"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nconst categories = [\r\n  {\r\n    name: \"FAQ\",\r\n    value: \"faqs\",\r\n  },\r\n  {\r\n    name: \"JOB\",\r\n    value: \"jobs\",\r\n  },\r\n  {\r\n    name: \"SERVICE\",\r\n    value: \"services\",\r\n  },\r\n  {\r\n    name: \"PACKAGE\",\r\n    value: \"packages\",\r\n  },\r\n  {\r\n    name: \"TIP\",\r\n    value: \"tips\",\r\n  },\r\n];\r\nfunction CategoryUpsert() {\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    slug: \"\",\r\n    type: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/categories/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, slug, type } = res;\r\n          const formData = {\r\n            name,\r\n            slug,\r\n            type,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    if (values.type) {\r\n      console.log(values.type);\r\n      return;\r\n    } else {\r\n      new Promise((rsl, rej) => {\r\n        if (editId) {\r\n          handleEdit(`${BaseUrl}/categories/${editId}`, values, rsl, rej);\r\n        } else {\r\n          handleCreate(`${BaseUrl}/categories`, values, rsl, rej);\r\n        }\r\n      })\r\n        .then((res) => history.push(\"/admin/category\"))\r\n        .catch((err) => {\r\n          setErrMsg(err);\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Category </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              label=\"Category Name *\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err, i) => (\r\n              <FormHelperText error key={i}>\r\n                {\" \"}\r\n                {err}\r\n              </FormHelperText>\r\n            ))}\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Category Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err, i) => (\r\n              <FormHelperText error key={i}>\r\n                {\" \"}\r\n                {err}\r\n              </FormHelperText>\r\n            ))}\r\n\r\n            <TextField\r\n              label=\"Category Type *\"\r\n              margin=\"dense\"\r\n              select\r\n              variant=\"outlined\"\r\n              inputProps={{\r\n                inputRef: (ref) => {\r\n                  if (!ref) return;\r\n                  register({\r\n                    name: \"type\",\r\n                    value: ref.value,\r\n                    required: \"This is Required\",\r\n                  });\r\n                },\r\n                onChange: (e) => {\r\n                  const { type } = values;\r\n\r\n                  setValues({\r\n                    ...values,\r\n                    type: e.target.value,\r\n                  });\r\n                },\r\n              }}\r\n              error={errors.type ? true : false}\r\n              value={values.type}\r\n              fullWidth\r\n            >\r\n              {categories.map((ctg, i) => (\r\n                <MenuItem value={ctg.value} key={i}>\r\n                  {ctg.name}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n            <FormHelperText error>{errors.type?.message}</FormHelperText>\r\n            {errMsg?.type.map((err, i) => (\r\n              <FormHelperText error key={i}>\r\n                {\" \"}\r\n                {err}\r\n              </FormHelperText>\r\n            ))}\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default CategoryUpsert;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Orders.js",["323","324"],"import React, { useEffect, useContext, useCallback } from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"./Title\";\r\nimport { AdminContext } from \"../context/AdminContext\";\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\nexport default function Orders() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n  const crtPage = ctxDetails.current_page;\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/users?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(`http://gulfjobs.nwsols.com/api/users?per_page=${10}&page=${1}`);\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <Title className={classes.title}>Users </Title>\r\n            <Title className={classes.title}>Total: {ctxDetails.total} </Title>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n                  <StyledTableCell>Email</StyledTableCell>\r\n                  <StyledTableCell>Mobile Number</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created Date</StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {index + 1 + (crtPage > 1 ? crtPage * 10 - 10 : 0)}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {row.first_name} {row.last_name}\r\n                    </TableCell>\r\n                    <TableCell>{row.email}</TableCell>\r\n                    <TableCell>{row.mobile_number}</TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Moment\r\n                        date={row.created_at.split(\"T\")[0].replace(/-/g, \"\")}\r\n                        fromNow\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Chart.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsUpsert.js",["325","326"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\n\r\nexport default function AdsUpsert() {\r\n  const classes = useStyles();\r\n\r\n  const [errMsg, setErrMsg] = useState(null);\r\n\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    location: \"\",\r\n    content: \"\",\r\n    status: \"\",\r\n  });\r\n\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/advertisements/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { location, content, status } = res;\r\n\r\n          const formData = {\r\n            location,\r\n            content,\r\n            status,\r\n          };\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    console.log(data);\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/advertisements/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/advertisements`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/ads\"))\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n\r\n  const handleContent = (e, editor) => {\r\n    const data = editor.getData();\r\n    setValues({ ...values, content: data });\r\n  };\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Advertisement </Title>\r\n\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Location *\"\r\n              name=\"location\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              margin=\"dense\"\r\n              value={values.location}\r\n              onChange={handleChange}\r\n              error={errors.location ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.location?.message}</FormHelperText>\r\n\r\n            <CKEditor\r\n              editor={ClassicEditor}\r\n              data={values.content}\r\n              onChange={handleContent}\r\n            />\r\n\r\n            <FormHelperText error>{errors.content?.message}</FormHelperText>\r\n            {errMsg?.content.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              label=\"Status\"\r\n              select\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              inputProps={{\r\n                inputRef: (ref) => {\r\n                  if (!ref) return;\r\n                  register({\r\n                    name: \"status\",\r\n                    value: ref.value,\r\n                  });\r\n                },\r\n                onChange: (e) => {\r\n                  const { status } = values;\r\n\r\n                  setValues({ ...values, status: e.target.value });\r\n                },\r\n              }}\r\n              value={values.status}\r\n              fullWidth\r\n              error={errors.status ? true : false}\r\n            >\r\n              <MenuItem value={0}>In-Active</MenuItem>\r\n              <MenuItem value={1}>Active</MenuItem>\r\n            </TextField>\r\n\r\n            <FormHelperText error>{errors.status?.message}</FormHelperText>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(2),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Partner\\Index.js",["327","328"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport PartnerTable from \"../../components/Partner/PartnerTable\";\r\n\r\nexport default function Location() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/partners?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/partners?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Partners </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n\r\n                  <StyledTableCell>Image</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <PartnerTable\r\n                    row={row}\r\n                    index={index}\r\n                    key={index}\r\n                    crtPage={ctxDetails.current_page}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Service\\Index.js",["329","330"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport ServiceTable from \"../../components/Service/ServiceTable\";\r\n\r\nexport default function Service() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/services?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/services?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Services </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Title</StyledTableCell>\r\n                  \r\n                  <StyledTableCell>Price</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Category</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <ServiceTable row={row} index={index} key={index} crtPage={ctxDetails.current_page}/>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Job\\Index.js",["331","332"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport JobTable from \"../../components/Job/JobTable\";\r\n\r\nexport default function Job() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/jobs?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/jobs?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Jobs </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Title</StyledTableCell>\r\n                  <StyledTableCell>Location</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Seats</StyledTableCell>\r\n                  <StyledTableCell>Category</StyledTableCell>\r\n                  <StyledTableCell>Company </StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <JobTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Faq\\Index.js",["333","334"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport FaqTable from \"../../components/Faq/FaqTable\";\r\n\r\nexport default function Faq() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/faqs?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/faqs?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>FAQs </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Heading</StyledTableCell>\r\n                  <StyledTableCell>Description</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Category </StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <FaqTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Location\\Index.js",["335","336"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport LocationTable from \"../../components/Location/LocationTable\";\r\n\r\nexport default function Location() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/locations?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/locations?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Locations </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Location</StyledTableCell>\r\n\r\n                  <StyledTableCell>Code</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <LocationTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Industry\\Index.js",["337","338"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport IndustryTable from \"../../components/Industry/IndustryTable\";\r\n\r\nexport default function Industry() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/industries?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/industries?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Industries </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <IndustryTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Education\\Index.js",["339","340"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport EducationTable from \"../../components/Education/EducationTable\";\r\n\r\nexport default function Education() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/educations?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/educations?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Educations </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <EducationTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Category\\Index.js",["341","342"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport CategoryTable from \"../../components/Category/CategoryTable\";\r\n\r\nexport default function Category() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/categories?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/categories?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Categories </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n                  <StyledTableCell>Type</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created</StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <CategoryTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Tip\\Index.js",["343","344"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport TipTable from \"../../components/Tip/TipTable\";\r\n\r\nexport default function Tip() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/tips?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/tips?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Tips </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Heading</StyledTableCell>\r\n                  <StyledTableCell>Description</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Category</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <TipTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Ads\\Index.js",["345","346"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport AdsTable from \"../../components/Ads/AdsTable\";\r\n\r\nexport default function Ads() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/advertisements?per_page=${10}&page=${value}`\r\n    );\r\n    console.log(value);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/advertisements?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Advertisements </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Location</StyledTableCell>\r\n                  <StyledTableCell>Content</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created</StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <AdsTable\r\n                    row={row}\r\n                    index={index}\r\n                    key={index}\r\n                    crtPage={ctxDetails.current_page}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\dashboard\\index.js",["347","348"],"import React, { useContext, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Drawer,\r\n  Box,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  IconButton,\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Menu, ChevronLeft, ExitToApp } from \"@material-ui/icons\";\r\n\r\nimport MenuBar from \"../../components/MenuBar\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"GulfJobs360 \"}\r\n      <Link color=\"inherit\" to=\"/\">\r\n        View Website\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default function Dashboard({ children }) {\r\n  const history = useHistory();\r\n  const { logoutUser } = useContext(AdminContext);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const handleLogout = () => {\r\n    logoutUser();\r\n    history.push(\"/admin/login\");\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={classes.appBar}\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(\r\n              classes.menuButton,\r\n              open && classes.menuButtonHidden\r\n            )}\r\n          >\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n            className={classes.title}\r\n          >\r\n            GulfJobs360\r\n          </Typography>\r\n          <IconButton color=\"inherit\" onClick={handleLogout}>\r\n            <ExitToApp />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeft />\r\n          </IconButton>\r\n          <img\r\n            src={`${process.env.PUBLIC_URL}/assets/img/gulfblacklogo.png`}\r\n            width={drawerWidth / 2}\r\n          />\r\n        </div>\r\n\r\n        <MenuBar />\r\n      </Drawer>\r\n      <main className={clsx(classes.content, open && classes.contentShift)}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Paper className={fixedHeightPaper}>{children}</Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Box pt={4}>\r\n            <Copyright />\r\n          </Box>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    // justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    overflowY: \"auto\",\r\n    width: drawerWidth,\r\n    // height:'100vh',\r\n    // paddingTop:theme.spacing(0),\r\n    // paddingBottom:theme.spacing(0),\r\n\r\n    display: \"block\",\r\n\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    marginLeft: drawerWidth / 4,\r\n    width: `calc(100% - ${drawerWidth / 3}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  contentShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    // overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    \r\n  },\r\n  fixedHeight: {\r\n    // height: 240,\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\MenuBar.js",["349","350"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Collapse,\r\n  ListItemIcon,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { menuItems } from \"../routes/menuItems\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"block\",\r\n\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  links: {\r\n    textDecoration: \"none\",\r\n    \"&:active\": {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n  dense: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n  },\r\n  primary: {\r\n    color: theme.palette.secondary.main,\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(3),\r\n  },\r\n}));\r\nexport default function MenuBar() {\r\n  const classes = useStyles();\r\n  const [menu, setMenu] = useState({});\r\n  const [selectedIndex, setSelectedIndex] = useState(\"\");\r\n\r\n  const handleListItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n  };\r\n  const handleClick = (item) => {\r\n    const menuchange = { [item]: !menu[item] };\r\n    setMenu(menuchange);\r\n  };\r\n\r\n  const handler = (children) => {\r\n    return children?.map((subOption, index) => {\r\n      if (!subOption.children) {\r\n        return (\r\n          <div key={index}>\r\n            <Link to={subOption.url} className={classes.links}>\r\n              <ListItem\r\n                className={classes.dense}\r\n                dense\r\n                button\r\n                key={subOption.name}\r\n                selected={selectedIndex === subOption.select}\r\n                onClick={(event) =>\r\n                  handleListItemClick(event, subOption.select)\r\n                }\r\n              >\r\n                <IconButton\r\n                  color=\"secondary\"\r\n                  edge=\"start\"\r\n                  size=\"medium\"\r\n                  className={classes.button}\r\n                >\r\n                  {subOption.icon}\r\n                </IconButton>\r\n                <ListItemText\r\n                  primary={subOption.name}\r\n                  className={classes.primary}\r\n                />\r\n              </ListItem>\r\n            </Link>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div key={index}>\r\n          <ListItem\r\n            button\r\n            dense\r\n            className={classes.dense}\r\n            onClick={() => handleClick(subOption.name)}\r\n            selected={selectedIndex === subOption.select}\r\n          >\r\n            <IconButton\r\n              color=\"primary\"\r\n              edge=\"start\"\r\n              size=\"medium\"\r\n              className={classes.button}\r\n            >\r\n              {subOption.icon}\r\n            </IconButton>{\" \"}\r\n            <ListItemText primary={subOption.name} />\r\n            {menu[subOption.name] ? <ExpandLess /> : <ExpandMore />}\r\n          </ListItem>\r\n          <Collapse in={menu[subOption.name]} timeout=\"auto\" unmountOnExit>\r\n            {handler(subOption.children)}\r\n          </Collapse>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\">{handler(menuItems)}</List>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerDel.js",["351"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function PartnerDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const partnerDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/partners/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this\r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={partnerDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceDel.js",["352"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const ServiceDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/services/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this Service\r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={ServiceDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobDel.js",["353"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function JobDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const JobDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/jobs/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>Are you sure to Delete this</DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={JobDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqDel.js",["354"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function FaqDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const FaqDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/faqs/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={FaqDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationDel.js",["355"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function LocationDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const LocationDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/locations/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={LocationDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsDel.js",["356"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport {useHistory} from 'react-router-dom'\r\nexport default function AdsDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n  const history=useHistory()\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const AdsDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/advertisements/${delId}`, delId);\r\n    history.push('/admin/ads')\r\n    setOpen(false);\r\n\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>Are you sure to Delete this Advertisement</DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={AdsDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipDel.js",["357"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const TipDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/tips/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this Tips\r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={TipDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryDel.js",["358"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function CategoryDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const CategoryDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/categories/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={CategoryDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationDel.js",["359"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function EducationDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const EducationDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/educations/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={EducationDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryDel.js",["360"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function IndustryDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const IndustryDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/industries/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={IndustryDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\menuItems.js",[],{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","severity":1,"message":"366","line":56,"column":13,"nodeType":"367","messageId":"368","endLine":56,"endColumn":16},{"ruleId":"369","severity":1,"message":"370","line":172,"column":6,"nodeType":"371","endLine":172,"endColumn":23,"suggestions":"372"},{"ruleId":"373","severity":1,"message":"374","line":9,"column":1,"nodeType":"375","endLine":54,"endColumn":3},{"ruleId":"365","severity":1,"message":"376","line":12,"column":15,"nodeType":"367","messageId":"368","endLine":12,"endColumn":20},{"ruleId":"377","severity":1,"message":"378","line":15,"column":7,"nodeType":"379","messageId":"380","endLine":15,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":19,"column":7,"nodeType":"379","messageId":"380","endLine":19,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":23,"column":7,"nodeType":"379","messageId":"380","endLine":23,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":26,"column":7,"nodeType":"379","messageId":"380","endLine":26,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":29,"column":7,"nodeType":"379","messageId":"380","endLine":29,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":39,"column":7,"nodeType":"379","messageId":"380","endLine":39,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":46,"column":7,"nodeType":"379","messageId":"380","endLine":46,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":52,"column":7,"nodeType":"379","messageId":"380","endLine":52,"endColumn":13},{"ruleId":"365","severity":1,"message":"381","line":26,"column":10,"nodeType":"367","messageId":"368","endLine":26,"endColumn":13},{"ruleId":"365","severity":1,"message":"382","line":26,"column":15,"nodeType":"367","messageId":"368","endLine":26,"endColumn":21},{"ruleId":"365","severity":1,"message":"383","line":1,"column":40,"nodeType":"367","messageId":"368","endLine":1,"endColumn":51},{"ruleId":"365","severity":1,"message":"384","line":2,"column":8,"nodeType":"367","messageId":"368","endLine":2,"endColumn":14},{"ruleId":"365","severity":1,"message":"385","line":14,"column":10,"nodeType":"367","messageId":"368","endLine":14,"endColumn":20},{"ruleId":"365","severity":1,"message":"386","line":38,"column":11,"nodeType":"367","messageId":"368","endLine":38,"endColumn":20},{"ruleId":"365","severity":1,"message":"387","line":38,"column":31,"nodeType":"367","messageId":"368","endLine":38,"endColumn":41},{"ruleId":"365","severity":1,"message":"388","line":38,"column":43,"nodeType":"367","messageId":"368","endLine":38,"endColumn":53},{"ruleId":"369","severity":1,"message":"389","line":68,"column":6,"nodeType":"371","endLine":68,"endColumn":8,"suggestions":"390"},{"ruleId":"365","severity":1,"message":"391","line":13,"column":10,"nodeType":"367","messageId":"368","endLine":13,"endColumn":24},{"ruleId":"365","severity":1,"message":"392","line":18,"column":10,"nodeType":"367","messageId":"368","endLine":18,"endColumn":18},{"ruleId":"369","severity":1,"message":"393","line":67,"column":6,"nodeType":"371","endLine":67,"endColumn":8,"suggestions":"394"},{"ruleId":"365","severity":1,"message":"395","line":68,"column":12,"nodeType":"367","messageId":"368","endLine":68,"endColumn":23},{"ruleId":"365","severity":1,"message":"396","line":72,"column":12,"nodeType":"367","messageId":"368","endLine":72,"endColumn":22},{"ruleId":"365","severity":1,"message":"397","line":78,"column":12,"nodeType":"367","messageId":"368","endLine":78,"endColumn":22},{"ruleId":"365","severity":1,"message":"398","line":9,"column":3,"nodeType":"367","messageId":"368","endLine":9,"endColumn":14},{"ruleId":"365","severity":1,"message":"399","line":10,"column":3,"nodeType":"367","messageId":"368","endLine":10,"endColumn":13},{"ruleId":"365","severity":1,"message":"400","line":11,"column":3,"nodeType":"367","messageId":"368","endLine":11,"endColumn":9},{"ruleId":"365","severity":1,"message":"401","line":14,"column":8,"nodeType":"367","messageId":"368","endLine":14,"endColumn":25},{"ruleId":"365","severity":1,"message":"402","line":16,"column":22,"nodeType":"367","messageId":"368","endLine":16,"endColumn":38},{"ruleId":"365","severity":1,"message":"403","line":17,"column":19,"nodeType":"367","messageId":"368","endLine":17,"endColumn":29},{"ruleId":"365","severity":1,"message":"404","line":18,"column":10,"nodeType":"367","messageId":"368","endLine":18,"endColumn":22},{"ruleId":"365","severity":1,"message":"405","line":48,"column":43,"nodeType":"367","messageId":"368","endLine":48,"endColumn":50},{"ruleId":"369","severity":1,"message":"406","line":93,"column":6,"nodeType":"371","endLine":93,"endColumn":8,"suggestions":"407"},{"ruleId":"369","severity":1,"message":"408","line":205,"column":6,"nodeType":"371","endLine":205,"endColumn":8,"suggestions":"409"},{"ruleId":"365","severity":1,"message":"410","line":282,"column":35,"nodeType":"367","messageId":"368","endLine":282,"endColumn":43},{"ruleId":"365","severity":1,"message":"411","line":381,"column":31,"nodeType":"367","messageId":"368","endLine":381,"endColumn":44},{"ruleId":"365","severity":1,"message":"412","line":416,"column":31,"nodeType":"367","messageId":"368","endLine":416,"endColumn":43},{"ruleId":"365","severity":1,"message":"413","line":451,"column":31,"nodeType":"367","messageId":"368","endLine":451,"endColumn":37},{"ruleId":"365","severity":1,"message":"414","line":533,"column":31,"nodeType":"367","messageId":"368","endLine":533,"endColumn":40},{"ruleId":"365","severity":1,"message":"415","line":582,"column":31,"nodeType":"367","messageId":"368","endLine":582,"endColumn":41},{"ruleId":"365","severity":1,"message":"416","line":617,"column":31,"nodeType":"367","messageId":"368","endLine":617,"endColumn":42},{"ruleId":"369","severity":1,"message":"393","line":66,"column":6,"nodeType":"371","endLine":66,"endColumn":8,"suggestions":"417"},{"ruleId":"369","severity":1,"message":"406","line":85,"column":6,"nodeType":"371","endLine":85,"endColumn":8,"suggestions":"418"},{"ruleId":"365","severity":1,"message":"416","line":191,"column":29,"nodeType":"367","messageId":"368","endLine":191,"endColumn":40},{"ruleId":"369","severity":1,"message":"393","line":64,"column":6,"nodeType":"371","endLine":64,"endColumn":8,"suggestions":"419"},{"ruleId":"369","severity":1,"message":"393","line":63,"column":6,"nodeType":"371","endLine":63,"endColumn":8,"suggestions":"420"},{"ruleId":"369","severity":1,"message":"406","line":84,"column":6,"nodeType":"371","endLine":84,"endColumn":8,"suggestions":"421"},{"ruleId":"365","severity":1,"message":"416","line":187,"column":29,"nodeType":"367","messageId":"368","endLine":187,"endColumn":40},{"ruleId":"369","severity":1,"message":"393","line":89,"column":6,"nodeType":"371","endLine":89,"endColumn":8,"suggestions":"422"},{"ruleId":"365","severity":1,"message":"423","line":189,"column":27,"nodeType":"367","messageId":"368","endLine":189,"endColumn":31},{"ruleId":"369","severity":1,"message":"424","line":45,"column":6,"nodeType":"371","endLine":45,"endColumn":8,"suggestions":"425"},{"ruleId":"369","severity":1,"message":"426","line":50,"column":6,"nodeType":"371","endLine":50,"endColumn":8,"suggestions":"427"},{"ruleId":"369","severity":1,"message":"393","line":74,"column":6,"nodeType":"371","endLine":74,"endColumn":8,"suggestions":"428"},{"ruleId":"365","severity":1,"message":"429","line":143,"column":27,"nodeType":"367","messageId":"368","endLine":143,"endColumn":33},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"430"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"431"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"432"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"433"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"434"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"435"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"436"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"437"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"438"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"439"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"440"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"441"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"442"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"443"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"444"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"445"},{"ruleId":"369","severity":1,"message":"424","line":34,"column":6,"nodeType":"371","endLine":34,"endColumn":8,"suggestions":"446"},{"ruleId":"369","severity":1,"message":"426","line":41,"column":6,"nodeType":"371","endLine":41,"endColumn":8,"suggestions":"447"},{"ruleId":"369","severity":1,"message":"424","line":32,"column":6,"nodeType":"371","endLine":32,"endColumn":8,"suggestions":"448"},{"ruleId":"369","severity":1,"message":"426","line":39,"column":6,"nodeType":"371","endLine":39,"endColumn":8,"suggestions":"449"},{"ruleId":"450","severity":1,"message":"451","line":57,"column":9,"nodeType":"452","endLine":57,"endColumn":70},{"ruleId":"453","severity":1,"message":"454","line":98,"column":11,"nodeType":"455","endLine":101,"endColumn":13},{"ruleId":"365","severity":1,"message":"456","line":1,"column":17,"nodeType":"367","messageId":"368","endLine":1,"endColumn":26},{"ruleId":"365","severity":1,"message":"457","line":7,"column":3,"nodeType":"367","messageId":"368","endLine":7,"endColumn":15},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"459"},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"460"},{"ruleId":"369","severity":1,"message":"458","line":26,"column":6,"nodeType":"371","endLine":26,"endColumn":8,"suggestions":"461"},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"462"},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"463"},{"ruleId":"369","severity":1,"message":"464","line":31,"column":6,"nodeType":"371","endLine":31,"endColumn":8,"suggestions":"465"},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"466"},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"467"},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"468"},{"ruleId":"369","severity":1,"message":"458","line":27,"column":6,"nodeType":"371","endLine":27,"endColumn":8,"suggestions":"469"},"no-native-reassign",["470"],"no-negated-in-lhs",["471"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'children'. Either include it or remove the dependency array.","ArrayExpression",["472"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'token' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'msg' is assigned a value but never used.","'setMsg' is assigned a value but never used.","'useCallback' is defined but never used.","'Moment' is defined but never used.","'Pagination' is defined but never used.","'fetchData' is assigned a value but never used.","'ctxDetails' is assigned a value but never used.","'ctxResults' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleGet' and 'viewId'. Either include them or remove the dependency array.",["473"],"'DropzoneDialog' is defined but never used.","'fileOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editId' and 'handleGet'. Either include them or remove the dependency array.",["474"],"'handleClose' is defined but never used.","'handleSave' is defined but never used.","'handleOpen' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MUIRichTextEditor' is defined but never used.","'MuiThemeProvider' is defined but never used.","'Controller' is defined but never used.","'defaultTheme' is defined but never used.","'control' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editId', 'handleCategory', and 'handleGet'. Either include them or remove the dependency array.",["475"],"React Hook useEffect has missing dependencies: 'editId', 'fetchLocation', 'handleCategory', and 'handleGet'. Either include them or remove the dependency array.",["476"],"'currency' is assigned a value but never used.","'industry_type' is assigned a value but never used.","'job_location' is assigned a value but never used.","'gender' is assigned a value but never used.","'education' is assigned a value but never used.","'company_id' is assigned a value but never used.","'category_id' is assigned a value but never used.",["477"],["478"],["479"],["480"],["481"],["482"],"'type' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["483"],"React Hook useEffect has missing dependencies: 'ctxResults' and 'fetchData'. Either include them or remove the dependency array.",["484"],["485"],"'status' is assigned a value but never used.",["486"],["487"],["488"],["489"],["490"],["491"],["492"],["493"],["494"],["495"],["496"],["497"],["498"],["499"],["500"],["501"],["502"],["503"],["504"],["505"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'ListItemIcon' is defined but never used.","React Hook useCallback has missing dependencies: 'delId' and 'handleDelete'. Either include them or remove the dependency array.",["506"],["507"],["508"],["509"],["510"],"React Hook useCallback has missing dependencies: 'delId', 'handleDelete', and 'history'. Either include them or remove the dependency array.",["511"],["512"],["513"],["514"],["515"],"no-global-assign","no-unsafe-negation",{"desc":"516","fix":"517"},{"desc":"518","fix":"519"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"520","fix":"526"},{"desc":"522","fix":"527"},{"desc":"520","fix":"528"},{"desc":"520","fix":"529"},{"desc":"522","fix":"530"},{"desc":"520","fix":"531"},{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"520","fix":"536"},{"desc":"532","fix":"537"},{"desc":"534","fix":"538"},{"desc":"532","fix":"539"},{"desc":"534","fix":"540"},{"desc":"532","fix":"541"},{"desc":"534","fix":"542"},{"desc":"532","fix":"543"},{"desc":"534","fix":"544"},{"desc":"532","fix":"545"},{"desc":"534","fix":"546"},{"desc":"532","fix":"547"},{"desc":"534","fix":"548"},{"desc":"532","fix":"549"},{"desc":"534","fix":"550"},{"desc":"532","fix":"551"},{"desc":"534","fix":"552"},{"desc":"532","fix":"553"},{"desc":"534","fix":"554"},{"desc":"532","fix":"555"},{"desc":"534","fix":"556"},{"desc":"557","fix":"558"},{"desc":"557","fix":"559"},{"desc":"557","fix":"560"},{"desc":"557","fix":"561"},{"desc":"557","fix":"562"},{"desc":"563","fix":"564"},{"desc":"557","fix":"565"},{"desc":"557","fix":"566"},{"desc":"557","fix":"567"},{"desc":"557","fix":"568"},"Update the dependencies array to be: [state.loading, state.details, state.results, state.user, children]",{"range":"569","text":"570"},"Update the dependencies array to be: [handleGet, viewId]",{"range":"571","text":"572"},"Update the dependencies array to be: [editId, handleGet]",{"range":"573","text":"574"},"Update the dependencies array to be: [editId, handleCategory, handleGet]",{"range":"575","text":"576"},"Update the dependencies array to be: [editId, fetchLocation, handleCategory, handleGet]",{"range":"577","text":"578"},{"range":"579","text":"574"},{"range":"580","text":"576"},{"range":"581","text":"574"},{"range":"582","text":"574"},{"range":"583","text":"576"},{"range":"584","text":"574"},"Update the dependencies array to be: [fetchData]",{"range":"585","text":"586"},"Update the dependencies array to be: [ctxResults, fetchData]",{"range":"587","text":"588"},{"range":"589","text":"574"},{"range":"590","text":"586"},{"range":"591","text":"588"},{"range":"592","text":"586"},{"range":"593","text":"588"},{"range":"594","text":"586"},{"range":"595","text":"588"},{"range":"596","text":"586"},{"range":"597","text":"588"},{"range":"598","text":"586"},{"range":"599","text":"588"},{"range":"600","text":"586"},{"range":"601","text":"588"},{"range":"602","text":"586"},{"range":"603","text":"588"},{"range":"604","text":"586"},{"range":"605","text":"588"},{"range":"606","text":"586"},{"range":"607","text":"588"},{"range":"608","text":"586"},{"range":"609","text":"588"},"Update the dependencies array to be: [delId, handleDelete]",{"range":"610","text":"611"},{"range":"612","text":"611"},{"range":"613","text":"611"},{"range":"614","text":"611"},{"range":"615","text":"611"},"Update the dependencies array to be: [delId, handleDelete, history]",{"range":"616","text":"617"},{"range":"618","text":"611"},{"range":"619","text":"611"},{"range":"620","text":"611"},{"range":"621","text":"611"},[5015,5032],"[state.loading, state.details, state.results, state.user, children]",[1806,1808],"[handleGet, viewId]",[1938,1940],"[editId, handleGet]",[2623,2625],"[editId, handleCategory, handleGet]",[5102,5104],"[editId, fetchLocation, handleCategory, handleGet]",[1836,1838],[2390,2392],[1770,1772],[1795,1797],[2357,2359],[2100,2102],[1183,1185],"[fetchData]",[1328,1330],"[ctxResults, fetchData]",[1983,1985],[871,873],[1033,1035],[870,872],[1032,1034],[850,852],[1008,1010],[850,852],[1008,1010],[875,877],[1038,1040],[876,878],[1040,1042],[880,882],[1044,1046],[876,878],[1040,1042],[850,852],[1008,1010],[873,875],[1041,1043],[708,710],"[delId, handleDelete]",[704,706],[692,694],[696,698],[711,713],[832,834],"[delId, handleDelete, history]",[696,698],[712,714],[714,716],[712,714]]