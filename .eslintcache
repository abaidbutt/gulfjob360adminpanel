[{"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\index.js":"1","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\reportWebVitals.js":"2","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\theme.js":"3","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\App.js":"4","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminContext.js":"5","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminReducer.js":"6","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\Index.js":"7","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\404.js":"8","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Login.js":"9","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobView.js":"10","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerUpsert.js":"11","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceUpsert.js":"12","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\config\\index.js":"13","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Title.js":"14","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobUpsert.js":"15","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationUpsert.js":"16","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqUpsert.js":"17","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationUpsert.js":"18","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryUpsert.js":"19","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipUpsert.js":"20","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryUpsert.js":"21","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Orders.js":"22","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Chart.js":"23","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsUpsert.js":"24","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Partner\\Index.js":"25","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Service\\Index.js":"26","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Job\\Index.js":"27","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Faq\\Index.js":"28","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Location\\Index.js":"29","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Industry\\Index.js":"30","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Education\\Index.js":"31","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Category\\Index.js":"32","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Tip\\Index.js":"33","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Ads\\Index.js":"34","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\dashboard\\index.js":"35","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerTable.js":"36","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceTable.js":"37","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobTable.js":"38","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqTable.js":"39","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationTable.js":"40","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsTable.js":"41","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipTable.js":"42","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryTable.js":"43","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationTable.js":"44","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryTable.js":"45","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\MenuBar.js":"46","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerDel.js":"47","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceDel.js":"48","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobDel.js":"49","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqDel.js":"50","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationDel.js":"51","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsDel.js":"52","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipDel.js":"53","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryDel.js":"54","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationDel.js":"55","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryDel.js":"56","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\menuItems.js":"57"},{"size":1068,"mtime":1613632690831,"results":"58","hashOfConfig":"59"},{"size":362,"mtime":499162500000,"results":"60","hashOfConfig":"59"},{"size":2731,"mtime":1613543894003,"results":"61","hashOfConfig":"59"},{"size":1286,"mtime":1614273874496,"results":"62","hashOfConfig":"59"},{"size":5290,"mtime":1614263859583,"results":"63","hashOfConfig":"59"},{"size":1394,"mtime":1613899509628,"results":"64","hashOfConfig":"59"},{"size":5575,"mtime":1614274110290,"results":"65","hashOfConfig":"59"},{"size":1666,"mtime":1612886373952,"results":"66","hashOfConfig":"59"},{"size":4567,"mtime":1613899338369,"results":"67","hashOfConfig":"59"},{"size":5621,"mtime":1613881038052,"results":"68","hashOfConfig":"59"},{"size":6018,"mtime":1613738377219,"results":"69","hashOfConfig":"59"},{"size":9102,"mtime":1613738396811,"results":"70","hashOfConfig":"59"},{"size":1598,"mtime":1613624161043,"results":"71","hashOfConfig":"59"},{"size":423,"mtime":1612859119944,"results":"72","hashOfConfig":"59"},{"size":22023,"mtime":1613738794789,"results":"73","hashOfConfig":"59"},{"size":5889,"mtime":1613480632730,"results":"74","hashOfConfig":"59"},{"size":7877,"mtime":1613738463970,"results":"75","hashOfConfig":"59"},{"size":4990,"mtime":1613480259543,"results":"76","hashOfConfig":"59"},{"size":5130,"mtime":1613480981600,"results":"77","hashOfConfig":"59"},{"size":7751,"mtime":1613738529826,"results":"78","hashOfConfig":"59"},{"size":7010,"mtime":1613555280390,"results":"79","hashOfConfig":"59"},{"size":3829,"mtime":1613881092665,"results":"80","hashOfConfig":"59"},{"size":1790,"mtime":1612604709341,"results":"81","hashOfConfig":"59"},{"size":5715,"mtime":1613881900881,"results":"82","hashOfConfig":"59"},{"size":3505,"mtime":1613466329328,"results":"83","hashOfConfig":"59"},{"size":3543,"mtime":1613466334669,"results":"84","hashOfConfig":"59"},{"size":3710,"mtime":1613816793384,"results":"85","hashOfConfig":"59"},{"size":3501,"mtime":1613466297233,"results":"86","hashOfConfig":"59"},{"size":3412,"mtime":1613466316379,"results":"87","hashOfConfig":"59"},{"size":3413,"mtime":1613466304062,"results":"88","hashOfConfig":"59"},{"size":3418,"mtime":1613466290106,"results":"89","hashOfConfig":"59"},{"size":3408,"mtime":1613466281382,"results":"90","hashOfConfig":"59"},{"size":3500,"mtime":1613466344685,"results":"91","hashOfConfig":"59"},{"size":3579,"mtime":1613463694214,"results":"92","hashOfConfig":"59"},{"size":5857,"mtime":1613899178762,"results":"93","hashOfConfig":"59"},{"size":2091,"mtime":1613881056329,"results":"94","hashOfConfig":"59"},{"size":1929,"mtime":1613881062143,"results":"95","hashOfConfig":"59"},{"size":2216,"mtime":1613881026637,"results":"96","hashOfConfig":"59"},{"size":1903,"mtime":1613881012920,"results":"97","hashOfConfig":"59"},{"size":1827,"mtime":1613881044099,"results":"98","hashOfConfig":"59"},{"size":1926,"mtime":1614263738510,"results":"99","hashOfConfig":"59"},{"size":1909,"mtime":1613881071448,"results":"100","hashOfConfig":"59"},{"size":1816,"mtime":1613881000774,"results":"101","hashOfConfig":"59"},{"size":1857,"mtime":1613881006754,"results":"102","hashOfConfig":"59"},{"size":1851,"mtime":1613881019495,"results":"103","hashOfConfig":"59"},{"size":3236,"mtime":1613640634626,"results":"104","hashOfConfig":"59"},{"size":1379,"mtime":1613380635908,"results":"105","hashOfConfig":"59"},{"size":1383,"mtime":1613380640699,"results":"106","hashOfConfig":"59"},{"size":1333,"mtime":1613380619392,"results":"107","hashOfConfig":"59"},{"size":1364,"mtime":1613380592663,"results":"108","hashOfConfig":"59"},{"size":1384,"mtime":1613380624731,"results":"109","hashOfConfig":"59"},{"size":1487,"mtime":1613466081534,"results":"110","hashOfConfig":"59"},{"size":1368,"mtime":1613380646277,"results":"111","hashOfConfig":"59"},{"size":1385,"mtime":1613380606361,"results":"112","hashOfConfig":"59"},{"size":1388,"mtime":1613380597700,"results":"113","hashOfConfig":"59"},{"size":1385,"mtime":1613380586817,"results":"114","hashOfConfig":"59"},{"size":4896,"mtime":1613632720286,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"nac9k1",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"118"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"118"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"118"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"118"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"118"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"118"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"118"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"118"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"118"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"118"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"118"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"118"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"118"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"118"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"118"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"118"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"118"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"118"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"118"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"118"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"118"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"118"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"118"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"118"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\index.js",[],["265","266"],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\reportWebVitals.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\theme.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\App.js",["267","268","269","270"],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminContext.js",["271","272"],"import { useEffect, useMemo } from \"react\";\r\nimport { createContext, useReducer } from \"react\";\r\nimport adminReducer, { initState } from \"./AdminReducer\";\r\nimport Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const AdminContext = createContext();\r\n\r\nconst AdminProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(adminReducer, initState);\r\n\r\n  async function handleFetch(routeName, rsl, rej) {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const { data } = response.data;\r\n\r\n      rsl(data);\r\n    } catch (err) {\r\n      rej(err.response);\r\n    }\r\n  }\r\n\r\n  async function fetchData(routeName, perPage, page) {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const res = response.data;\r\n\r\n      const { data, current_page, last_page, total } = res;\r\n      if (res) {\r\n        dispatch({\r\n          type: \"RESULTS\",\r\n          payload: { data, details: { current_page, last_page, total } },\r\n        });\r\n      }\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n    }\r\n\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  }\r\n\r\n  const handleDelete = async (routeName, delId) => {\r\n    try {\r\n      const response = await Axios.delete(routeName);\r\n\r\n      if (response.status === 202) {\r\n        dispatch({ type: \"DELETE\", payload: delId });\r\n        toast.success(\"Delete Successfully\");\r\n      }\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleEdit = async (routeName, values, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.put(routeName, values);\r\n      const res = response.data;\r\n\r\n      if (res.success === 1) {\r\n        dispatch({ type: \"UPDATE\", payload: res });\r\n        toast.success(\"Update Successfully\");\r\n      }\r\n\r\n      rsl();\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n      const { error } = err.response.data;\r\n      dispatch({ type: \"ERROR\", payload: error });\r\n      rej(error);\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleCreate = async (routeName, values, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.post(routeName, values);\r\n      const res = response.data;\r\n\r\n      if (response.status === 201) {\r\n        dispatch({ type: \"CREATE\", payload: res });\r\n        toast.success(\"Create Successfully\");\r\n      }\r\n      rsl();\r\n    } catch (err) {\r\n      const { error } = err.response.data;\r\n      dispatch({ type: \"ERROR\", payload: error });\r\n      rej(error);\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleGet = async (routeName, editId, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const res = response.data;\r\n\r\n      dispatch({ type: \"GET\" });\r\n      rsl(res);\r\n    } catch (err) {\r\n      dispatch({ type: \"ERROR\", payload: err.response });\r\n      rej();\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  const handleCategory = async (routeName, type, rsl, rej) => {\r\n    try {\r\n      const response = await Axios.get(routeName);\r\n      const res = response.data;\r\n\r\n      rsl(res.data);\r\n\r\n      dispatch({ type: \"CATEGORY\" });\r\n    } catch (err) {\r\n      const { data } = err.response?.error;\r\n      dispatch({ type: \"ERROR\", payload: data });\r\n      rej();\r\n    }\r\n    dispatch({ type: \"LOADING\", payload: false });\r\n  };\r\n  async function loginUser(routeName, credentials, rsl, rej) {\r\n    try {\r\n      const response = await Axios.post(routeName, credentials);\r\n      const res = response.data;\r\n      if (response.status === 202) {\r\n        dispatch({ type: \"LOGIN\", payload: res.success });\r\n        toast.success(\"Login Successfully\");\r\n      }\r\n      rsl(res.success.token);\r\n    } catch (err) {\r\n      // dispatch({ type: \"ERROR\", payload: err.response });\r\n      rej(err.response);\r\n    }\r\n  }\r\n  async function logoutUser(routeName, credentials, rsl, rej) {\r\n    dispatch({ type: \"LOGOUT\" });\r\n    toast(\"Logout Successfully\");\r\n  }\r\n  // useEffect(() => {\r\n  //   fetchData(dataSource);\r\n  // }, [dataSource]);\r\n  return useMemo(() => {\r\n    return (\r\n      <AdminContext.Provider\r\n        value={{\r\n          ctxLoad: state.loading,\r\n          ctxDetails: state.details,\r\n          ctxResults: state.results,\r\n          ctxUser: state.user,\r\n          fetchData,\r\n          handleDelete,\r\n          handleEdit,\r\n          handleCreate,\r\n          handleGet,\r\n          handleCategory,\r\n          handleFetch,\r\n          loginUser,\r\n          logoutUser,\r\n        }}\r\n      >\r\n        {children}\r\n      </AdminContext.Provider>\r\n    );\r\n  }, [state, dispatch]);\r\n\r\n  // return (\r\n  //   <AdminContext.Provider\r\n  //     value={{\r\n  //       ctxLoad: state.loading,\r\n  //       ctxDetails: state.details,\r\n  //       ctxResults: state.results,\r\n  //       ctxUser: state.user,\r\n  //       fetchData,\r\n  //       handleDelete,\r\n  //       handleEdit,\r\n  //       handleCreate,\r\n  //       handleGet,\r\n  //       handleCategory,\r\n  //       handleFetch,\r\n  //       loginUser,\r\n  //       logoutUser,\r\n  //     }}\r\n  //   >\r\n  //     {children}\r\n  //   </AdminContext.Provider>\r\n  // );\r\n};\r\n\r\nexport default AdminProvider;\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\context\\AdminReducer.js",["273","274","275","276","277","278","279","280"],"export const initState = {\r\n  user: JSON.parse(localStorage.getItem(\"credentials\")) || null,\r\n  results: [],\r\n  loading: true,\r\n  error: \"\",\r\n  details: {},\r\n};\r\n\r\nconst adminReducer = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOGIN\":\r\n      const { user } = payload;\r\n      localStorage.setItem(\"credentials\", JSON.stringify(payload));\r\n      return { ...state, user: user };\r\n      break;\r\n    case \"LOGOUT\":\r\n      localStorage.clear();\r\n      return { ...state, user: null };\r\n      break;\r\n    case \"CREATE\":\r\n      console.log(payload);\r\n      return { ...state, loading: payload, error: \"\" };\r\n      break;\r\n    case \"LOADING\":\r\n      return { ...state, loading: payload, error: \"\" };\r\n      break;\r\n    case \"ERROR\":\r\n      return { ...state, error: payload, loading: false };\r\n      break;\r\n    case \"RESULTS\":\r\n      const { data, details } = payload;\r\n      return {\r\n        ...state,\r\n        results: data,\r\n        details: details,\r\n        loading: false,\r\n        error: \"\",\r\n      };\r\n      break;\r\n    case \"DELETE\":\r\n      console.log(payload);\r\n      return {\r\n        ...state,\r\n        results: state.results.filter((res) => res.id !== payload),\r\n      };\r\n      break;\r\n\r\n    default:\r\n      // const token=localStorage.getItem('token')\r\n      // JSON.parse(token)\r\n      return { ...state };\r\n      break;\r\n  }\r\n};\r\n\r\nexport default adminReducer;\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\Index.js",["281","282","283","284","285"],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\404.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Login.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobView.js",["286","287"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport Title from \"../Title\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    backgroundColor: theme.palette.background.default,\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\nexport default function JobView() {\r\n  const classes = useStyles2();\r\n  const { ctxLoad, handleGet } = useContext(AdminContext);\r\n  const [viewData, setViewData] = useState(null);\r\n  const { viewId } = useParams();\r\n\r\n  useEffect(() => {\r\n    console.log(viewId);\r\n    if (viewId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(\r\n          `http://gulfjobs.nwsols.com/api/jobs/${viewId}`,\r\n          viewId,\r\n          rsl,\r\n          rej\r\n        );\r\n      })\r\n        .then((res) => {\r\n          setViewData(res);\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!viewData ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <Title className={classes.title}>Jobs Details </Title>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell></StyledTableCell>\r\n                  <StyledTableCell></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow>\r\n                  <StyledTableCell>Title</StyledTableCell>\r\n                  <TableCell>{viewData?.title}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Description</StyledTableCell>\r\n                  <TableCell>{viewData?.description}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Other Benefits</StyledTableCell>\r\n                  <TableCell>{viewData?.other_benifits}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Total Seats</StyledTableCell>\r\n                  <TableCell>{viewData?.total_seats}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <TableCell>\r\n                    {viewData?.status === 0 ? \"In-Active\" : \"Active\"}\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Max Salary</StyledTableCell>\r\n                  <TableCell>{viewData?.max_salary}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Min Salary</StyledTableCell>\r\n                  <TableCell>{viewData?.min_salary}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Industry</StyledTableCell>\r\n                  <TableCell>{viewData?.industry_type}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Job Location</StyledTableCell>\r\n                  <TableCell>{viewData?.job_location}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Current Location</StyledTableCell>\r\n                  <TableCell>{viewData?.current_location}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Experince From</StyledTableCell>\r\n                  <TableCell>{viewData?.experince_from}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Job Faq</StyledTableCell>\r\n                  <TableCell>{viewData?.job_faq}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Nationality</StyledTableCell>\r\n                  <TableCell>{viewData?.nationality}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Gender</StyledTableCell>\r\n                  <TableCell>{viewData?.gender}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Company</StyledTableCell>\r\n                  <TableCell>{viewData?.company_id}</TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell>Created At</StyledTableCell>\r\n                  <TableCell>\r\n                    <Moment\r\n                      date={viewData.created_at.split(\".\")[0]}\r\n                      from={new Date().toJSON().split(\".\")[0]}\r\n                      ago\r\n                      interval={30000}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerUpsert.js",["288"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    image: [],\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/partners/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, description, image } = res;\r\n          const formData = {\r\n            name,\r\n            description,\r\n            image,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    const formData = new FormData();\r\n    formData.append(\"name\", values.name);\r\n    formData.append(\"description\", values.description);\r\n    values.image = data.image[0];\r\n    formData.append(\"image\", values.image);\r\n\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/partners/${editId}`, formData, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/partners`, formData, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/partner\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n  const handleContent = (e, editor) => {\r\n    const data = editor.getData();\r\n    setValues({ ...values, description: data });\r\n  };\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Partner </Title>\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={handleSubmit(EditSubmit)}\r\n            encType=\"multipart/form-data\"\r\n          >\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"name *\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <CKEditor\r\n              editor={ClassicEditor}\r\n              data={values.description}\r\n              onChange={handleContent}\r\n            />\r\n\r\n            {/* <FormHelperText error>{errors.description?.message}</FormHelperText> */}\r\n\r\n            {/* <TextField\r\n              name=\"description\"\r\n              label=\"description *\"\r\n              variant=\"outlined\"\r\n              value={values.description}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              fullWidth\r\n              margin=\"dense\"\r\n              multiline\r\n              rows={4}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.description ? true : false}\r\n            /> */}\r\n            <div style={{marginTop:'10px'}}>\r\n              <input\r\n                accept=\"image/*\"\r\n                style={{ display: \"none\" }}\r\n                id=\"contained-button-file\"\r\n                type=\"file\"\r\n                name=\"image\"\r\n                ref={register}\r\n                onChange={(e) => {\r\n                  setValues({ ...values, image: e.target.files[0].name });\r\n                }}\r\n              />\r\n\r\n              <label htmlFor=\"contained-button-file\">\r\n                <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                  Upload\r\n                </Button>\r\n              </label>\r\n            </div>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceUpsert.js",["289","290"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate, handleCategory } = useContext(\r\n    AdminContext\r\n  );\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const [category, setCategory] = useState();\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    slug: \"\",\r\n    status: \"\",\r\n    category_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors, control } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/services/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { title, description, price, status, slug, category_id } = res;\r\n          const formData = {\r\n            title,\r\n            description,\r\n            price,\r\n            status,\r\n            slug,\r\n            category_id,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"services\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"services\");\r\n        setCategory(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/services/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/services`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/service\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n  const handleContent = (e, editor) => {\r\n    const data = editor.getData();\r\n    setValues({ ...values, description: data });\r\n  };\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Service </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Service Title *\"\r\n              name=\"title\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              fullWidth\r\n              value={values.title}\r\n              onChange={handleChange}\r\n              error={errors.title ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.title?.message}</FormHelperText>\r\n            {errMsg?.title.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <CKEditor\r\n              editor={ClassicEditor}\r\n              data={values.description}\r\n              onChange={handleContent}\r\n            />\r\n            {/* \r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Service Description *\"\r\n              name=\"description\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              value={values.description}\r\n              multiline\r\n              rows={3}\r\n              onChange={handleChange}\r\n              error={errors.description ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.description?.message}</FormHelperText> */}\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Service Price *\"\r\n              margin=\"dense\"\r\n              name=\"price\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={values.price}\r\n              onChange={handleChange}\r\n              error={errors.price ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.price?.message}</FormHelperText>\r\n\r\n            <TextField\r\n              name=\"slug\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              label=\"Service Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n\r\n            <TextField\r\n              label=\"status\"\r\n              select\r\n              name=\"status\"\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              inputProps={{\r\n                inputRef: () =>\r\n                  register({\r\n                    required: \"Thisi s Required\",\r\n                  }),\r\n              }}\r\n              onChange={handleChange}\r\n              value={values.status}\r\n              fullWidth\r\n              error={errors.status ? true : false}\r\n            >\r\n              <MenuItem value={0}>In-Active</MenuItem>\r\n              <MenuItem value={1}>Active</MenuItem>\r\n            </TextField>\r\n\r\n            <FormHelperText error>{errors.status?.message}</FormHelperText>\r\n\r\n            <TextField\r\n              label=\"Service Category\"\r\n              select\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              name=\"category_id\"\r\n              onChange={handleChange}\r\n              // inputProps={{\r\n              //   inputRef: (ref) => {\r\n              //     if (!ref) return;\r\n              //     register({\r\n              //       name: \"status\",\r\n              //       value: ref.value,\r\n              //       required: \"Thisis Required\",\r\n              //     });\r\n              //   },\r\n              // }}\r\n              value={values.category_id}\r\n              fullWidth\r\n              error={errors.category_id ? true : false}\r\n            >\r\n              <MenuItem value={values.category_id}></MenuItem>\r\n              {category &&\r\n                category.map((ctg, i) => (\r\n                  <MenuItem value={ctg.id} key={i}>\r\n                    {ctg.name}\r\n                  </MenuItem>\r\n                ))}\r\n            </TextField>\r\n\r\n            <FormHelperText error>{errors.category_id?.message}</FormHelperText>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\config\\index.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Title.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobUpsert.js",["291","292","293","294","295","296","297","298"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\n\r\nconst currencies = [\r\n  {\r\n    name: \"US\",\r\n    value: \"\\u0024\",\r\n  },\r\n  {\r\n    name: \"Cent\",\r\n    value: \"\\u00A2\",\r\n  },\r\n  {\r\n    name: \"Pound\",\r\n    value: \"\\u00A3\",\r\n  },\r\n  {\r\n    name: \"EURO\",\r\n    value: \"\\u20A0\",\r\n  },\r\n  {\r\n    name: \"YEN\",\r\n    value: \"\\u00A5\",\r\n  },\r\n];\r\nconst gender = [\r\n  { name: \"male\", value: \"male\" },\r\n  { name: \"female\", value: \"female\" },\r\n  { name: \"no-preference\", value: \"no-preference\" },\r\n];\r\n\r\nexport default function JobUpsert() {\r\n  const [location, setLocation] = useState([]);\r\n  const [industry, setIndustry] = useState([]);\r\n  const [educations, setEducations] = useState([]);\r\n  const [employeries, setEmployers] = useState([]);\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const {\r\n    handleEdit,\r\n    handleGet,\r\n    handleCreate,\r\n    handleCategory,\r\n    handleFetch,\r\n  } = useContext(AdminContext);\r\n  const [categories, setCategories] = useState();\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    job_location: \"\",\r\n    currency: \"$\",\r\n    min_salry: \"\",\r\n    max_salary: \"\",\r\n    other_benifits: \"\",\r\n    total_seats: \"\",\r\n    category_id: \"\",\r\n    industry_type: \"\",\r\n    functional_area: \"\",\r\n    gender: \"\",\r\n    experince_from: \"\",\r\n    experince_to: \"\",\r\n    nationality: \"\",\r\n    current_location: \"\",\r\n    education: \"\",\r\n    job_faq: \"\",\r\n    company_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n\r\n  function fetchLocation() {\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/locations`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setLocation(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/industries`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setIndustry(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/educations`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setEducations(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    new Promise((rsl, rej) => {\r\n      handleFetch(`${BaseUrl}/employers`, rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        setEmployers(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchLocation();\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/jobs/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          console.log(res, editId);\r\n          const {\r\n            title,\r\n            description,\r\n            job_location,\r\n            currency,\r\n            min_salry,\r\n            max_salary,\r\n            other_benifits,\r\n            total_seats,\r\n            category_id,\r\n            industry_type,\r\n            functional_area,\r\n            gender,\r\n            experince_from,\r\n            experince_to,\r\n            nationality,\r\n            current_location,\r\n            education,\r\n            job_faq,\r\n            company_id,\r\n          } = res;\r\n          const formData = {\r\n            title,\r\n            description,\r\n            job_location,\r\n            currency,\r\n            min_salry,\r\n            max_salary,\r\n            other_benifits,\r\n            total_seats,\r\n            category_id,\r\n            industry_type,\r\n            functional_area,\r\n            gender,\r\n            experince_from,\r\n            experince_to,\r\n            nationality,\r\n            current_location,\r\n            education,\r\n            job_faq,\r\n            company_id,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"jobs\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"jobs\");\r\n        setCategories(cateGory);\r\n        console.log(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/jobs/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/jobs`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/job\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n        console.log(err);\r\n      });\r\n  };\r\n  const handleContent = (e, editor) => {\r\n    const data = editor.getData();\r\n    setValues({ ...values, description: data });\r\n  };\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\">\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Job </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"title\"\r\n                  label=\"Job Title\"\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  autoComplete=\"shipping address-line2\"\r\n                  value={values.title}\r\n                  inputRef={register({ required: \"Title Required\" })}\r\n                  error={errors.title ? true : false}\r\n                />\r\n                <FormHelperText error>{errors.title?.message}</FormHelperText>\r\n                {errMsg?.title.map((err) => (\r\n                  <FormHelperText error> {err}</FormHelperText>\r\n                ))}\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <CKEditor\r\n                  editor={ClassicEditor}\r\n                  data={values.description}\r\n                  onChange={handleContent}\r\n                />\r\n                {/* <TextField\r\n                  color=\"secondary\"\r\n                  name=\"description\"\r\n                  label=\"Job Description\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  value={values.description}\r\n                  variant=\"outlined\"\r\n                  inputRef={register({ required: \"Description Required\" })}\r\n                  error={errors.description ? true : false}\r\n                />\r\n                <FormHelperText error>\r\n                  {errors.description?.message}\r\n                </FormHelperText> */}\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={2}>\r\n                    <TextField\r\n                      label=\"Currency\"\r\n                      select\r\n                      variant=\"outlined\"\r\n                      inputProps={{\r\n                        inputRef: (ref) => {\r\n                          if (!ref) return;\r\n                          register({\r\n                            name: \"currency\",\r\n                            value: ref.value,\r\n                          });\r\n                        },\r\n                        onChange: (e) => {\r\n                          const { currency } = values;\r\n\r\n                          setValues({\r\n                            ...values,\r\n                            currency: e.target.value,\r\n                          });\r\n                        },\r\n                      }}\r\n                      value={values.currency}\r\n                      fullWidth\r\n                      inputRef={register}\r\n                      error={errors.currency ? true : false}\r\n                    >\r\n                      {currencies.map((ctg, i) => (\r\n                        <MenuItem value={ctg.name} key={i}>\r\n                          {ctg.value}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      color=\"secondary\"\r\n                      name=\"min_salry\"\r\n                      value={values.min_salry}\r\n                      label=\"Min Salary\"\r\n                      onChange={handleChange}\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      inputRef={register}\r\n                      error={errors.min_salry ? true : false}\r\n                    />\r\n                    <FormHelperText error>\r\n                      {errors.min_salry?.message}\r\n                    </FormHelperText>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      color=\"secondary\"\r\n                      name=\"max_salary\"\r\n                      label=\"Max Salary\"\r\n                      value={values.max_salary}\r\n                      onChange={handleChange}\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      inputRef={register}\r\n                      error={errors.max_salary ? true : false}\r\n                    />\r\n                    <FormHelperText error>\r\n                      {errors.max_salary?.message}\r\n                    </FormHelperText>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"other_benifits\"\r\n                  label=\"Other Benifits\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  value={values.other_benifits}\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  name=\"total_seats\"\r\n                  label=\"Total Seats\"\r\n                  color=\"secondary\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.total_seats}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                  error={errors.total_seats ? true : false}\r\n                />\r\n                <FormHelperText error>\r\n                  {errors.total_seats?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Industry\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"industry_type\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { industry_type } = values;\r\n\r\n                      setValues({ ...values, industry_type: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.industry_type}\r\n                  fullWidth\r\n                  error={errors.industry_type ? true : false}\r\n                >\r\n                  {industry &&\r\n                    industry.map((indust) => (\r\n                      <MenuItem value={indust.id} key={indust.id}>\r\n                        {indust.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.industry_type?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Location\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"job_location\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { job_location } = values;\r\n\r\n                      setValues({ ...values, job_location: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.job_location}\r\n                  fullWidth\r\n                  error={errors.job_location ? true : false}\r\n                >\r\n                  {location &&\r\n                    location.map((loc) => (\r\n                      <MenuItem value={loc.id} key={loc.id}>\r\n                        {loc.location_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.job_location?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"gender\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"gender\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { gender } = values;\r\n\r\n                      setValues({ ...values, gender: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.gender}\r\n                  fullWidth\r\n                  error={errors.gender ? true : false}\r\n                >\r\n                  {gender &&\r\n                    gender.map((indust, i) => (\r\n                      <MenuItem value={indust.value} key={i}>\r\n                        {indust.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>{errors.gender?.message}</FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"current_location\"\r\n                  label=\"Current Location \"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.current_location}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"experince_from\"\r\n                  label=\"Experience From \"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.experince_from}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"experince_to\"\r\n                  label=\"Experience To\"\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  value={values.experince_to}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"nationality\"\r\n                  label=\"Nationality\"\r\n                  fullWidth\r\n                  onChange={handleChange}\r\n                  value={values.nationality}\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"education\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"education\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { education } = values;\r\n\r\n                      setValues({ ...values, education: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.education}\r\n                  fullWidth\r\n                  error={errors.education ? true : false}\r\n                >\r\n                  {educations &&\r\n                    educations.map((edu, i) => (\r\n                      <MenuItem value={edu.id} key={i}>\r\n                        {edu.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.education?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  color=\"secondary\"\r\n                  name=\"job_faq\"\r\n                  label=\"Job FAQ\"\r\n                  multiline\r\n                  onChange={handleChange}\r\n                  rows={2}\r\n                  value={values.job_faq}\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  inputRef={register}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"company_id\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"company_id\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { company_id } = values;\r\n\r\n                      setValues({ ...values, company_id: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.company_id}\r\n                  fullWidth\r\n                  error={errors.company_id ? true : false}\r\n                >\r\n                  {employeries &&\r\n                    employeries.map((emp, i) => (\r\n                      <MenuItem value={emp.id} key={i}>\r\n                        {emp.first_name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.company_id?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"category_id\"\r\n                  select\r\n                  variant=\"outlined\"\r\n                  inputProps={{\r\n                    inputRef: (ref) => {\r\n                      if (!ref) return;\r\n                      register({\r\n                        name: \"category_id\",\r\n                        value: ref.value,\r\n                      });\r\n                    },\r\n                    onChange: (e) => {\r\n                      const { category_id } = values;\r\n\r\n                      setValues({ ...values, category_id: e.target.value });\r\n                    },\r\n                  }}\r\n                  value={values.category_id}\r\n                  fullWidth\r\n                  error={errors.category_id ? true : false}\r\n                >\r\n                  {categories &&\r\n                    categories.map((cat, i) => (\r\n                      <MenuItem value={cat.id} key={i}>\r\n                        {cat.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <FormHelperText error>\r\n                  {errors.category_id?.message}\r\n                </FormHelperText>\r\n              </Grid>\r\n            </Grid>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationUpsert.js",["299"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [errMsg, setErrMsg] = useState(null);\r\n\r\n  const [values, setValues] = useState({\r\n    location_name: \"\",\r\n    slug: \"\",\r\n    code: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/locations/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { location_name, code, slug } = res;\r\n          const formData = {\r\n            location_name,\r\n            code,\r\n            slug,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/locations/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/locations`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/location\"))\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Location </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Location Name *\"\r\n              name=\"location_name\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              value={values.location_name}\r\n              onChange={handleChange}\r\n              error={errors.location_name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>\r\n              {errors.location_name?.message}\r\n            </FormHelperText>\r\n            {errMsg?.location_name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n\r\n            <TextField\r\n              name=\"code\"\r\n              label=\"Location Code *\"\r\n              variant=\"outlined\"\r\n              value={values.code}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.code ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.code?.message}</FormHelperText>\r\n            {errMsg?.code.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Location Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqUpsert.js",["300","301"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg]=useState(null)\r\n  const { handleEdit, handleGet, handleCreate, handleCategory } = useContext(\r\n    AdminContext\r\n  );\r\n  const [category, setCategory] = useState();\r\n  const [values, setValues] = useState({\r\n    heading: \"\",\r\n    description: \"\",\r\n    slug: \"\",\r\n    category_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/faqs/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          console.log(res, editId);\r\n          const { heading, description, slug, category_id } = res;\r\n          const formData = {\r\n            heading,\r\n            description,\r\n            slug,\r\n            category_id,\r\n          };\r\n          console.log(res, \"kj\");\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"faq\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"faq\");\r\n        setCategory(cateGory);\r\n        console.log(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/faqs/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/faqs`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/faq\"))\r\n      .catch((err) => {\r\n        setErrMsg(err)\r\n        console.log(err)\r\n      });\r\n  };\r\n  const handleContent = (e, editor) => {\r\n    const data = editor.getData();\r\n    setValues({ ...values, description: data });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId?'Edit':'Add'} FAQ </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              label=\"Faq Name *\"\r\n              name=\"heading\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              value={values.heading}\r\n              onChange={handleChange}\r\n              error={errors.heading ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.heading?.message}</FormHelperText>\r\n            {errMsg?.heading.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n               <CKEditor\r\n              editor={ClassicEditor}\r\n              data={values.description}\r\n              onChange={handleContent}\r\n            />\r\n            {/* <TextField\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              label=\"Faq Description *\"\r\n              name=\"description\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              value={values.description}\r\n              onChange={handleChange}\r\n              error={errors.description ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.description?.message}</FormHelperText> */}\r\n\r\n            <TextField\r\n              name=\"slug\"\r\n              margin=\"dense\"\r\n              label=\"Faq Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            \r\n              <TextField\r\n                label=\"Faq Category\"\r\n                margin=\"dense\"\r\n                select\r\n                variant=\"outlined\"\r\n                inputProps={{\r\n                  inputRef: (ref) => {\r\n                    if (!ref) return;\r\n                    register({\r\n                      name: \"category_id\",\r\n                      value: ref.value,\r\n                    });\r\n                  },\r\n                  onChange: (e) => {\r\n                    const { category_id } = values;\r\n\r\n                    setValues({\r\n                      ...values,\r\n                      category_id: e.target.value,\r\n                    });\r\n                  },\r\n                }}\r\n                value={values.category_id}\r\n                fullWidth\r\n                error={errors.category_id ? true : false}\r\n              >\r\n                {/* <MenuItem></MenuItem> */}\r\n                {category && category.map((ctg, i) => (\r\n                  <MenuItem value={ctg.id} key={i}>\r\n                    {ctg.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n          \r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationUpsert.js",["302"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg] = useState(null);\r\n\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    slug: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/educations/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, slug } = res;\r\n          const formData = {\r\n            name,\r\n            slug,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    console.log(values);\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/educations/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/educations`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/education\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Education </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Education Name *\"\r\n              margin=\"dense\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              margin=\"dense\"\r\n              name=\"slug\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              label=\"Education Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryUpsert.js",["303"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function AdsUpsert() {\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    slug: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/industries/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, slug } = res;\r\n          const formData = {\r\n            name,\r\n            slug,\r\n          };\r\n          console.log(res);\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/industries/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/industries`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/industry\"))\r\n      .catch((err) => {\r\n        setErrMsg(err);\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Industry </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Industry Name *\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              fullWidth\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Industry Slug *\"\r\n              variant=\"outlined\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipUpsert.js",["304","305"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipUpsert() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errMsg, setErrMsg]=useState(null)\r\n  const { handleEdit, handleGet, handleCreate, handleCategory } = useContext(\r\n    AdminContext\r\n  );\r\n  const [category, setCategory] = useState();\r\n  const [values, setValues] = useState({\r\n    heading: \"\",\r\n    description: \"\",\r\n    slug: \"\",\r\n    category_id: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/tips/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          console.log(res, editId);\r\n          const { heading, description, slug, category_id } = res;\r\n          const formData = {\r\n            heading,\r\n            description,\r\n            slug,\r\n            category_id,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    new Promise((rsl, rej) => {\r\n      handleCategory(`${BaseUrl}/categories`, \"tips\", rsl, rej);\r\n    })\r\n      .then((res) => {\r\n        const cateGory = res.filter((resCat) => resCat.type === \"tips\");\r\n        setCategory(cateGory);\r\n        console.log(cateGory);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/tips/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/tips`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/tip\"))\r\n      .catch((err) => {\r\n        setErrMsg(err)\r\n        console.log(err)\r\n      });\r\n  };\r\n  const handleContent = (e, editor) => {\r\n    const data = editor.getData();\r\n    setValues({ ...values, description: data });\r\n  };\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Tips </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Tip Name *\"\r\n              name=\"heading\"\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              value={values.heading}\r\n              onChange={handleChange}\r\n              error={errors.heading ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.heading?.message}</FormHelperText>\r\n            {errMsg?.heading.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n             <CKEditor\r\n              editor={ClassicEditor}\r\n              data={values.description}\r\n              onChange={handleContent}\r\n            />\r\n            {/* <TextField\r\n              type=\"text\"\r\n              label=\"Tip Description *\"\r\n              name=\"description\"\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              value={values.description}\r\n              onChange={handleChange}\r\n              error={errors.description ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.description?.message}</FormHelperText> */}\r\n\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Tip Slug *\"\r\n              variant=\"outlined\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              margin=\"dense\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {category && (\r\n              <TextField\r\n                label=\"Tips Category Id\"\r\n                margin=\"dense\"\r\n                select\r\n                variant=\"outlined\"\r\n                inputProps={{\r\n                  inputRef: (ref) => {\r\n                    if (!ref) return;\r\n                    register({\r\n                      name: \"category_id\",\r\n                      value: ref.value,\r\n                    });\r\n                  },\r\n                  onChange: (e) => {\r\n                    const { category_id } = values;\r\n\r\n                    setValues({ ...values, category_id: e.target.value });\r\n                  },\r\n                }}\r\n                value={values.category_id}\r\n                fullWidth\r\n                error={errors.category_id ? true : false}\r\n              >\r\n                {/* <MenuItem></MenuItem> */}\r\n                {category.map((ctg, i) => (\r\n                  <MenuItem value={ctg.id} key={i}>\r\n                    {ctg.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n            )}\r\n\r\n            <FormHelperText error>{errors.category_id?.message}</FormHelperText>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryUpsert.js",["306","307"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nconst categories = [\r\n  {\r\n    name: \"FAQ\",\r\n    value: \"faqs\",\r\n  },\r\n  {\r\n    name: \"JOB\",\r\n    value: \"jobs\",\r\n  },\r\n  {\r\n    name: \"SERVICE\",\r\n    value: \"services\",\r\n  },\r\n  {\r\n    name: \"PACKAGE\",\r\n    value: \"packages\",\r\n  },\r\n  {\r\n    name: \"TIP\",\r\n    value: \"tips\",\r\n  },\r\n];\r\nfunction CategoryUpsert() {\r\n  const [errMsg, setErrMsg] = useState(null);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    slug: \"\",\r\n    type: \"\",\r\n  });\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/categories/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { name, slug, type } = res;\r\n          const formData = {\r\n            name,\r\n            slug,\r\n            type,\r\n          };\r\n\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    if (values.type) {\r\n      console.log(values.type);\r\n      return;\r\n    } else {\r\n      new Promise((rsl, rej) => {\r\n        if (editId) {\r\n          handleEdit(`${BaseUrl}/categories/${editId}`, values, rsl, rej);\r\n        } else {\r\n          handleCreate(`${BaseUrl}/categories`, values, rsl, rej);\r\n        }\r\n      })\r\n        .then((res) => history.push(\"/admin/category\"))\r\n        .catch((err) => {\r\n          setErrMsg(err);\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Category </Title>\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              margin=\"dense\"\r\n              label=\"Category Name *\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              onKeyUp={(ev) => {\r\n                setValues({\r\n                  ...values,\r\n                  slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                });\r\n              }}\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              error={errors.name ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.name?.message}</FormHelperText>\r\n            {errMsg?.name.map((err, i) => (\r\n              <FormHelperText error key={i}>\r\n                {\" \"}\r\n                {err}\r\n              </FormHelperText>\r\n            ))}\r\n            <TextField\r\n              name=\"slug\"\r\n              label=\"Category Slug *\"\r\n              variant=\"outlined\"\r\n              value={values.slug}\r\n              onChange={handleChange}\r\n              margin=\"dense\"\r\n              type=\"text\"\r\n              onKeyUp={(ev) => {\r\n                if (ev.which === 32) {\r\n                  setValues({\r\n                    ...values,\r\n                    slug: ev.target.value.replace(/\\s+/g, \"_\"),\r\n                  });\r\n                }\r\n              }}\r\n              fullWidth\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n              error={errors.slug ? true : false}\r\n            />\r\n            <FormHelperText error>{errors.slug?.message}</FormHelperText>\r\n            {errMsg?.slug.map((err, i) => (\r\n              <FormHelperText error key={i}>\r\n                {\" \"}\r\n                {err}\r\n              </FormHelperText>\r\n            ))}\r\n\r\n            <TextField\r\n              label=\"Category Type *\"\r\n              margin=\"dense\"\r\n              select\r\n              variant=\"outlined\"\r\n              inputProps={{\r\n                inputRef: (ref) => {\r\n                  if (!ref) return;\r\n                  register({\r\n                    name: \"type\",\r\n                    value: ref.value,\r\n                    required: \"This is Required\",\r\n                  });\r\n                },\r\n                onChange: (e) => {\r\n                  const { type } = values;\r\n\r\n                  setValues({\r\n                    ...values,\r\n                    type: e.target.value,\r\n                  });\r\n                },\r\n              }}\r\n              error={errors.type ? true : false}\r\n              value={values.type}\r\n              fullWidth\r\n            >\r\n              {categories.map((ctg, i) => (\r\n                <MenuItem value={ctg.value} key={i}>\r\n                  {ctg.name}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n            <FormHelperText error>{errors.type?.message}</FormHelperText>\r\n            {errMsg?.type.map((err, i) => (\r\n              <FormHelperText error key={i}>\r\n                {\" \"}\r\n                {err}\r\n              </FormHelperText>\r\n            ))}\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default CategoryUpsert;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(0),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Orders.js",["308","309"],"import React, { useEffect, useContext, useCallback } from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"./Title\";\r\nimport { AdminContext } from \"../context/AdminContext\";\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\nexport default function Orders() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n  const crtPage = ctxDetails.current_page;\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/users?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(`http://gulfjobs.nwsols.com/api/users?per_page=${10}&page=${1}`);\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box display=\"flex\" justifyContent=\"space-between\">\r\n            <Title className={classes.title}>Users </Title>\r\n            <Title className={classes.title}>Total: {ctxDetails.total} </Title>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n                  <StyledTableCell>Email</StyledTableCell>\r\n                  <StyledTableCell>Mobile Number</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created Date</StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {index + 1 + (crtPage > 1 ? crtPage * 10 - 10 : 0)}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {row.first_name} {row.last_name}\r\n                    </TableCell>\r\n                    <TableCell>{row.email}</TableCell>\r\n                    <TableCell>{row.mobile_number}</TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Moment\r\n                        date={row.created_at.split(\".\")[0]}\r\n                        from={new Date().toJSON().split(\".\")[0]}\r\n                        ago\r\n                        interval={30000}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Chart.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsUpsert.js",["310","311","312"],"import React, { useEffect, useState, useCallback, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Container,\r\n  FormHelperText,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\n\r\n// import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport htmr from \"htmr\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Title from \"../Title\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\n\r\nexport default function AdsUpsert() {\r\n  const classes = useStyles();\r\n\r\n  const [errMsg, setErrMsg] = useState(null);\r\n\r\n  const history = useHistory();\r\n  const { handleEdit, handleGet, handleCreate } = useContext(AdminContext);\r\n  const [values, setValues] = useState({\r\n    location: \"\",\r\n    content: \"\",\r\n    status: \"\",\r\n  });\r\n\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n\r\n      setValues({ ...values, [name]: value });\r\n    },\r\n    [values]\r\n  );\r\n  let { editId } = useParams();\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    mode: \"onSubmit\",\r\n    reValidateMode: \"onChange\",\r\n    defaultValues: {},\r\n    resolver: undefined,\r\n    context: undefined,\r\n    criteriaMode: \"firstError\",\r\n    shouldFocusError: true,\r\n    shouldUnregister: true,\r\n  });\r\n  useEffect(() => {\r\n    if (editId) {\r\n      new Promise((rsl, rej) => {\r\n        handleGet(`${BaseUrl}/advertisements/${editId}`, editId, rsl, rej);\r\n      })\r\n        .then((res) => {\r\n          const { location, content, status } = res;\r\n\r\n          const formData = {\r\n            location: location,\r\n            content: \"\" || content || \"\",\r\n            status: status,\r\n          };\r\n          console.log(formData, res);\r\n          setValues(formData);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const EditSubmit = async (data) => {\r\n    console.log(data);\r\n    new Promise((rsl, rej) => {\r\n      if (editId) {\r\n        handleEdit(`${BaseUrl}/advertisements/${editId}`, values, rsl, rej);\r\n      } else {\r\n        handleCreate(`${BaseUrl}/advertisements`, values, rsl, rej);\r\n      }\r\n    })\r\n      .then((res) => history.push(\"/admin/ads\"))\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setErrMsg(err);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    console.log(values);\r\n  });\r\n\r\n  const handleContent = (e, editor) => {\r\n    const data = editor.getData();\r\n    setValues({ ...values, content: data });\r\n  };\r\n  return (\r\n    <>\r\n      <Container component=\"main\" maxWidth=\"md\" className={classes.root}>\r\n        <div className={classes.paper}>\r\n          <Title>{editId ? \"Edit\" : \"Add\"} Advertisement </Title>\r\n\r\n          <form className={classes.form} onSubmit={handleSubmit(EditSubmit)}>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Location *\"\r\n              name=\"location\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              margin=\"dense\"\r\n              value={values.location}\r\n              onChange={handleChange}\r\n              error={errors.location ? true : false}\r\n              inputRef={register({\r\n                required: \"This is Required\",\r\n              })}\r\n            />\r\n            <FormHelperText error>{errors.location?.message}</FormHelperText>\r\n\r\n            <CKEditor\r\n              editor={ClassicEditor}\r\n              data={values.content}\r\n              onChange={handleContent}\r\n            />\r\n\r\n            <FormHelperText error>{errors.content?.message}</FormHelperText>\r\n            {errMsg?.content.map((err) => (\r\n              <FormHelperText error> {err}</FormHelperText>\r\n            ))}\r\n            <TextField\r\n              label=\"Status\"\r\n              select\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              inputProps={{\r\n                inputRef: (ref) => {\r\n                  if (!ref) return;\r\n                  register({\r\n                    name: \"status\",\r\n                    value: ref.value,\r\n                  });\r\n                },\r\n                onChange: (e) => {\r\n                  const { status } = values;\r\n\r\n                  setValues({ ...values, status: e.target.value });\r\n                },\r\n              }}\r\n              value={values.status}\r\n              fullWidth\r\n              error={errors.status ? true : false}\r\n            >\r\n              <MenuItem value={0}>In-Active</MenuItem>\r\n              <MenuItem value={1}>Active</MenuItem>\r\n            </TextField>\r\n\r\n            <FormHelperText error>{errors.status?.message}</FormHelperText>\r\n            <div className={classes.wrapper}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.submit}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    width: \"70%\",\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(2),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  form: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    color: \"white\",\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n}));\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Partner\\Index.js",["313","314"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport PartnerTable from \"../../components/Partner/PartnerTable\";\r\n\r\nexport default function Location() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/partners?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/partners?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Partners </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n\r\n                  <StyledTableCell>Image</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <PartnerTable\r\n                    row={row}\r\n                    index={index}\r\n                    key={index}\r\n                    crtPage={ctxDetails.current_page}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Service\\Index.js",["315","316"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport ServiceTable from \"../../components/Service/ServiceTable\";\r\n\r\nexport default function Service() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/services?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/services?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Services </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Title</StyledTableCell>\r\n                  \r\n                  <StyledTableCell>Price</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Category</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <ServiceTable row={row} index={index} key={index} crtPage={ctxDetails.current_page}/>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Job\\Index.js",["317","318"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport JobTable from \"../../components/Job/JobTable\";\r\n\r\nexport default function Job() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/jobs?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(`http://gulfjobs.nwsols.com/api/jobs?per_page=${10}&page=${1}`);\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Jobs </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"secondary\"\r\n              gutterBottom\r\n            >\r\n              Total:\r\n            </Typography>\r\n            {ctxDetails.total}{\" \"}\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Title</StyledTableCell>\r\n                  <StyledTableCell>Location</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Seats</StyledTableCell>\r\n                  <StyledTableCell>Category</StyledTableCell>\r\n                  <StyledTableCell>Company </StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <JobTable\r\n                    row={row}\r\n                    index={index}\r\n                    key={index}\r\n                    crtPage={ctxDetails.current_page}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Faq\\Index.js",["319","320"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport FaqTable from \"../../components/Faq/FaqTable\";\r\n\r\nexport default function Faq() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/faqs?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/faqs?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>FAQs </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Heading</StyledTableCell>\r\n                  <StyledTableCell>Description</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Category </StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <FaqTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Location\\Index.js",["321","322"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport LocationTable from \"../../components/Location/LocationTable\";\r\n\r\nexport default function Location() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/locations?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/locations?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Locations </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Location</StyledTableCell>\r\n\r\n                  <StyledTableCell>Code</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <LocationTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Industry\\Index.js",["323","324"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport IndustryTable from \"../../components/Industry/IndustryTable\";\r\n\r\nexport default function Industry() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/industries?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/industries?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Industries </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <IndustryTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Education\\Index.js",["325","326"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport EducationTable from \"../../components/Education/EducationTable\";\r\n\r\nexport default function Education() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/educations?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/educations?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Educations </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <EducationTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Category\\Index.js",["327","328"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport CategoryTable from \"../../components/Category/CategoryTable\";\r\n\r\nexport default function Category() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/categories?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/categories?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Categories </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Name</StyledTableCell>\r\n                  <StyledTableCell>Type</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created</StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <CategoryTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Tip\\Index.js",["329","330"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  \r\n  Box,\r\n  Typography,\r\n  \r\n  CircularProgress,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport TipTable from \"../../components/Tip/TipTable\";\r\n\r\nexport default function Tip() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/tips?per_page=${10}&page=${value}`\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/tips?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Tips </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Heading</StyledTableCell>\r\n                  <StyledTableCell>Description</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n                  <StyledTableCell>Category</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created </StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <TipTable row={row} index={index} key={index} crtPage={ctxDetails.current_page} />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\Ads\\Index.js",["331","332"],"import React, { useContext, useCallback, useEffect } from \"react\";\r\n\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport Title from \"../../components/Title\";\r\n\r\nimport AdsTable from \"../../components/Ads/AdsTable\";\r\n\r\nexport default function Ads() {\r\n  const classes = useStyles2();\r\n  const { fetchData, ctxLoad, ctxDetails, ctxResults } = useContext(\r\n    AdminContext\r\n  );\r\n\r\n  const handleChange = useCallback((event, value) => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/advertisements?per_page=${10}&page=${value}`\r\n    );\r\n    console.log(value);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData(\r\n      `http://gulfjobs.nwsols.com/api/advertisements?per_page=${10}&page=${1}`\r\n    );\r\n    console.log(ctxResults);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {ctxLoad ? (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            flexWrap=\"wrap\"\r\n          >\r\n            <Title className={classes.title}>Advertisements </Title>\r\n            <Typography\r\n              className={classes.title}\r\n              component=\"h1\"\r\n              variant=\"h2\"\r\n              color=\"primary\"\r\n              gutterBottom\r\n            >\r\n              Total: {ctxDetails.total}{\" \"}\r\n            </Typography>\r\n          </Box>\r\n          <TableContainer>\r\n            <Table className={classes.table}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell>S.No</StyledTableCell>\r\n                  <StyledTableCell>Location</StyledTableCell>\r\n                  <StyledTableCell>Content</StyledTableCell>\r\n                  <StyledTableCell>Status</StyledTableCell>\r\n\r\n                  <StyledTableCell align=\"center\">Created</StyledTableCell>\r\n                  <StyledTableCell align=\"center\"></StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ctxResults.map((row, index) => (\r\n                  <AdsTable\r\n                    row={row}\r\n                    index={index}\r\n                    key={index}\r\n                    crtPage={ctxDetails.current_page}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            m={1}\r\n            p={1}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            <Pagination\r\n              count={ctxDetails.last_page}\r\n              page={ctxDetails.current_page || 1}\r\n              onChange={handleChange}\r\n              showFirstButton\r\n              showLastButton\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  title: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.background.default,\r\n    color: theme.palette.text.primary,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\pages\\dashboard\\index.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryTable.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\MenuBar.js",[],"C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Partner\\PartnerDel.js",["333"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function PartnerDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const partnerDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/partners/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this\r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={partnerDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Service\\ServiceDel.js",["334"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const ServiceDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/services/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this Service\r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={ServiceDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Job\\JobDel.js",["335"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function JobDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const JobDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/jobs/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>Are you sure to Delete this</DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={JobDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Faq\\FaqDel.js",["336"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function FaqDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const FaqDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/faqs/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={FaqDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Location\\LocationDel.js",["337"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function LocationDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const LocationDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/locations/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={LocationDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Ads\\AdsDel.js",["338"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nimport {useHistory} from 'react-router-dom'\r\nexport default function AdsDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n  const history=useHistory()\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const AdsDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/advertisements/${delId}`, delId);\r\n    history.push('/admin/ads')\r\n    setOpen(false);\r\n\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>Are you sure to Delete this Advertisement</DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={AdsDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Tip\\TipDel.js",["339"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function TipDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const TipDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/tips/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this Tips\r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={TipDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Category\\CategoryDel.js",["340"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function CategoryDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const CategoryDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/categories/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={CategoryDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Education\\EducationDel.js",["341"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function EducationDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const EducationDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/educations/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={EducationDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\components\\Industry\\IndustryDel.js",["342"],"import React, { useCallback, useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  \r\n} from \"@material-ui/core\";\r\nimport { BaseUrl } from \"../../config\";\r\nimport { Delete, Close } from \"@material-ui/icons\";\r\nimport { AdminContext } from \"../../context/AdminContext\";\r\nexport default function IndustryDel({ delId }) {\r\n  const { handleDelete } = useContext(AdminContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const IndustryDelete = useCallback(() => {\r\n    handleDelete(`${BaseUrl}/industries/${delId}`, delId);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Button color=\"primary\" onClick={handleClickOpen} fullWidth>\r\n        <Delete />\r\n      </Button>\r\n      <Dialog open={open} keepMounted>\r\n        <Box display=\"flex\" justifyContent=\"space-between\">\r\n          <DialogTitle>\r\n            Are you sure to Delete this \r\n          </DialogTitle>\r\n          <Button edge=\"start\" color=\"inherit\" onClick={handleClose}>\r\n            <Close />\r\n          </Button>\r\n        </Box>\r\n\r\n        <DialogActions>\r\n          <Button onClick={IndustryDelete} color=\"secondary\" variant=\"outlined\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\abaid\\Desktop\\gulf\\gulfjob360adminpanel\\src\\routes\\menuItems.js",[],{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","severity":1,"message":"348","line":6,"column":8,"nodeType":"349","messageId":"350","endLine":6,"endColumn":17},{"ruleId":"347","severity":1,"message":"351","line":7,"column":10,"nodeType":"349","messageId":"350","endLine":7,"endColumn":24},{"ruleId":"347","severity":1,"message":"352","line":7,"column":26,"nodeType":"349","messageId":"350","endLine":7,"endColumn":39},{"ruleId":"347","severity":1,"message":"353","line":12,"column":9,"nodeType":"349","messageId":"350","endLine":12,"endColumn":17},{"ruleId":"347","severity":1,"message":"354","line":1,"column":10,"nodeType":"349","messageId":"350","endLine":1,"endColumn":19},{"ruleId":"355","severity":1,"message":"356","line":162,"column":6,"nodeType":"357","endLine":162,"endColumn":23,"suggestions":"358"},{"ruleId":"359","severity":1,"message":"360","line":15,"column":7,"nodeType":"361","messageId":"362","endLine":15,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":19,"column":7,"nodeType":"361","messageId":"362","endLine":19,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":23,"column":7,"nodeType":"361","messageId":"362","endLine":23,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":26,"column":7,"nodeType":"361","messageId":"362","endLine":26,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":29,"column":7,"nodeType":"361","messageId":"362","endLine":29,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":39,"column":7,"nodeType":"361","messageId":"362","endLine":39,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":46,"column":7,"nodeType":"361","messageId":"362","endLine":46,"endColumn":13},{"ruleId":"359","severity":1,"message":"360","line":52,"column":7,"nodeType":"361","messageId":"362","endLine":52,"endColumn":13},{"ruleId":"347","severity":1,"message":"363","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":16},{"ruleId":"347","severity":1,"message":"351","line":3,"column":18,"nodeType":"349","messageId":"350","endLine":3,"endColumn":32},{"ruleId":"347","severity":1,"message":"348","line":9,"column":8,"nodeType":"349","messageId":"350","endLine":9,"endColumn":17},{"ruleId":"347","severity":1,"message":"364","line":143,"column":10,"nodeType":"349","messageId":"350","endLine":143,"endColumn":19},{"ruleId":"347","severity":1,"message":"365","line":157,"column":7,"nodeType":"349","messageId":"350","endLine":157,"endColumn":23},{"ruleId":"347","severity":1,"message":"366","line":38,"column":11,"nodeType":"349","messageId":"350","endLine":38,"endColumn":18},{"ruleId":"355","severity":1,"message":"367","line":61,"column":6,"nodeType":"357","endLine":61,"endColumn":8,"suggestions":"368"},{"ruleId":"355","severity":1,"message":"369","line":66,"column":6,"nodeType":"357","endLine":66,"endColumn":8,"suggestions":"370"},{"ruleId":"347","severity":1,"message":"371","line":45,"column":43,"nodeType":"349","messageId":"350","endLine":45,"endColumn":50},{"ruleId":"355","severity":1,"message":"372","line":88,"column":6,"nodeType":"357","endLine":88,"endColumn":8,"suggestions":"373"},{"ruleId":"355","severity":1,"message":"374","line":206,"column":6,"nodeType":"357","endLine":206,"endColumn":8,"suggestions":"375"},{"ruleId":"347","severity":1,"message":"376","line":291,"column":35,"nodeType":"349","messageId":"350","endLine":291,"endColumn":43},{"ruleId":"347","severity":1,"message":"377","line":390,"column":31,"nodeType":"349","messageId":"350","endLine":390,"endColumn":44},{"ruleId":"347","severity":1,"message":"378","line":425,"column":31,"nodeType":"349","messageId":"350","endLine":425,"endColumn":43},{"ruleId":"347","severity":1,"message":"379","line":460,"column":31,"nodeType":"349","messageId":"350","endLine":460,"endColumn":37},{"ruleId":"347","severity":1,"message":"380","line":542,"column":31,"nodeType":"349","messageId":"350","endLine":542,"endColumn":40},{"ruleId":"347","severity":1,"message":"381","line":591,"column":31,"nodeType":"349","messageId":"350","endLine":591,"endColumn":41},{"ruleId":"347","severity":1,"message":"382","line":626,"column":31,"nodeType":"349","messageId":"350","endLine":626,"endColumn":42},{"ruleId":"355","severity":1,"message":"369","line":66,"column":6,"nodeType":"357","endLine":66,"endColumn":8,"suggestions":"383"},{"ruleId":"355","severity":1,"message":"372","line":86,"column":6,"nodeType":"357","endLine":86,"endColumn":8,"suggestions":"384"},{"ruleId":"347","severity":1,"message":"382","line":201,"column":29,"nodeType":"349","messageId":"350","endLine":201,"endColumn":40},{"ruleId":"355","severity":1,"message":"369","line":64,"column":6,"nodeType":"357","endLine":64,"endColumn":8,"suggestions":"385"},{"ruleId":"355","severity":1,"message":"369","line":63,"column":6,"nodeType":"357","endLine":63,"endColumn":8,"suggestions":"386"},{"ruleId":"355","severity":1,"message":"372","line":85,"column":6,"nodeType":"357","endLine":85,"endColumn":8,"suggestions":"387"},{"ruleId":"347","severity":1,"message":"382","line":196,"column":29,"nodeType":"349","messageId":"350","endLine":196,"endColumn":40},{"ruleId":"355","severity":1,"message":"369","line":89,"column":6,"nodeType":"357","endLine":89,"endColumn":8,"suggestions":"388"},{"ruleId":"347","severity":1,"message":"389","line":189,"column":27,"nodeType":"349","messageId":"350","endLine":189,"endColumn":31},{"ruleId":"355","severity":1,"message":"390","line":45,"column":6,"nodeType":"357","endLine":45,"endColumn":8,"suggestions":"391"},{"ruleId":"355","severity":1,"message":"392","line":50,"column":6,"nodeType":"357","endLine":50,"endColumn":8,"suggestions":"393"},{"ruleId":"347","severity":1,"message":"394","line":16,"column":8,"nodeType":"349","messageId":"350","endLine":16,"endColumn":12},{"ruleId":"355","severity":1,"message":"369","line":75,"column":6,"nodeType":"357","endLine":75,"endColumn":8,"suggestions":"395"},{"ruleId":"347","severity":1,"message":"396","line":147,"column":27,"nodeType":"349","messageId":"350","endLine":147,"endColumn":33},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"397"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"398"},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"399"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"400"},{"ruleId":"355","severity":1,"message":"390","line":31,"column":6,"nodeType":"357","endLine":31,"endColumn":8,"suggestions":"401"},{"ruleId":"355","severity":1,"message":"392","line":36,"column":6,"nodeType":"357","endLine":36,"endColumn":8,"suggestions":"402"},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"403"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"404"},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"405"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"406"},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"407"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"408"},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"409"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"410"},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"411"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"412"},{"ruleId":"355","severity":1,"message":"390","line":34,"column":6,"nodeType":"357","endLine":34,"endColumn":8,"suggestions":"413"},{"ruleId":"355","severity":1,"message":"392","line":41,"column":6,"nodeType":"357","endLine":41,"endColumn":8,"suggestions":"414"},{"ruleId":"355","severity":1,"message":"390","line":32,"column":6,"nodeType":"357","endLine":32,"endColumn":8,"suggestions":"415"},{"ruleId":"355","severity":1,"message":"392","line":39,"column":6,"nodeType":"357","endLine":39,"endColumn":8,"suggestions":"416"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"418"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"419"},{"ruleId":"355","severity":1,"message":"417","line":26,"column":6,"nodeType":"357","endLine":26,"endColumn":8,"suggestions":"420"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"421"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"422"},{"ruleId":"355","severity":1,"message":"423","line":31,"column":6,"nodeType":"357","endLine":31,"endColumn":8,"suggestions":"424"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"425"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"426"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"427"},{"ruleId":"355","severity":1,"message":"417","line":27,"column":6,"nodeType":"357","endLine":27,"endColumn":8,"suggestions":"428"},"no-native-reassign",["429"],"no-negated-in-lhs",["430"],"no-unused-vars","'PageError' is defined but never used.","Identifier","unusedVar","'AnimatedSwitch' is defined but never used.","'AnimatedRoute' is defined but never used.","'location' is assigned a value but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'children'. Either include it or remove the dependency array.","ArrayExpression",["431"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'Switch' is defined but never used.","'mapStyles' is defined but never used.","'bounceTransition' is assigned a value but never used.","'ctxLoad' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleGet' and 'viewId'. Either include them or remove the dependency array.",["432"],"React Hook useEffect has missing dependencies: 'editId' and 'handleGet'. Either include them or remove the dependency array.",["433"],"'control' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editId', 'handleCategory', and 'handleGet'. Either include them or remove the dependency array.",["434"],"React Hook useEffect has missing dependencies: 'editId', 'fetchLocation', 'handleCategory', and 'handleGet'. Either include them or remove the dependency array.",["435"],"'currency' is assigned a value but never used.","'industry_type' is assigned a value but never used.","'job_location' is assigned a value but never used.","'gender' is assigned a value but never used.","'education' is assigned a value but never used.","'company_id' is assigned a value but never used.","'category_id' is assigned a value but never used.",["436"],["437"],["438"],["439"],["440"],["441"],"'type' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["442"],"React Hook useEffect has missing dependencies: 'ctxResults' and 'fetchData'. Either include them or remove the dependency array.",["443"],"'htmr' is defined but never used.",["444"],"'status' is assigned a value but never used.",["445"],["446"],["447"],["448"],["449"],["450"],["451"],["452"],["453"],["454"],["455"],["456"],["457"],["458"],["459"],["460"],["461"],["462"],["463"],["464"],"React Hook useCallback has missing dependencies: 'delId' and 'handleDelete'. Either include them or remove the dependency array.",["465"],["466"],["467"],["468"],["469"],"React Hook useCallback has missing dependencies: 'delId', 'handleDelete', and 'history'. Either include them or remove the dependency array.",["470"],["471"],["472"],["473"],["474"],"no-global-assign","no-unsafe-negation",{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"479","fix":"485"},{"desc":"481","fix":"486"},{"desc":"479","fix":"487"},{"desc":"479","fix":"488"},{"desc":"481","fix":"489"},{"desc":"479","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"479","fix":"495"},{"desc":"491","fix":"496"},{"desc":"493","fix":"497"},{"desc":"491","fix":"498"},{"desc":"493","fix":"499"},{"desc":"491","fix":"500"},{"desc":"493","fix":"501"},{"desc":"491","fix":"502"},{"desc":"493","fix":"503"},{"desc":"491","fix":"504"},{"desc":"493","fix":"505"},{"desc":"491","fix":"506"},{"desc":"493","fix":"507"},{"desc":"491","fix":"508"},{"desc":"493","fix":"509"},{"desc":"491","fix":"510"},{"desc":"493","fix":"511"},{"desc":"491","fix":"512"},{"desc":"493","fix":"513"},{"desc":"491","fix":"514"},{"desc":"493","fix":"515"},{"desc":"516","fix":"517"},{"desc":"516","fix":"518"},{"desc":"516","fix":"519"},{"desc":"516","fix":"520"},{"desc":"516","fix":"521"},{"desc":"522","fix":"523"},{"desc":"516","fix":"524"},{"desc":"516","fix":"525"},{"desc":"516","fix":"526"},{"desc":"516","fix":"527"},"Update the dependencies array to be: [state.loading, state.details, state.results, state.user, children]",{"range":"528","text":"529"},"Update the dependencies array to be: [handleGet, viewId]",{"range":"530","text":"531"},"Update the dependencies array to be: [editId, handleGet]",{"range":"532","text":"533"},"Update the dependencies array to be: [editId, handleCategory, handleGet]",{"range":"534","text":"535"},"Update the dependencies array to be: [editId, fetchLocation, handleCategory, handleGet]",{"range":"536","text":"537"},{"range":"538","text":"533"},{"range":"539","text":"535"},{"range":"540","text":"533"},{"range":"541","text":"533"},{"range":"542","text":"535"},{"range":"543","text":"533"},"Update the dependencies array to be: [fetchData]",{"range":"544","text":"545"},"Update the dependencies array to be: [ctxResults, fetchData]",{"range":"546","text":"547"},{"range":"548","text":"533"},{"range":"549","text":"545"},{"range":"550","text":"547"},{"range":"551","text":"545"},{"range":"552","text":"547"},{"range":"553","text":"545"},{"range":"554","text":"547"},{"range":"555","text":"545"},{"range":"556","text":"547"},{"range":"557","text":"545"},{"range":"558","text":"547"},{"range":"559","text":"545"},{"range":"560","text":"547"},{"range":"561","text":"545"},{"range":"562","text":"547"},{"range":"563","text":"545"},{"range":"564","text":"547"},{"range":"565","text":"545"},{"range":"566","text":"547"},{"range":"567","text":"545"},{"range":"568","text":"547"},"Update the dependencies array to be: [delId, handleDelete]",{"range":"569","text":"570"},{"range":"571","text":"570"},{"range":"572","text":"570"},{"range":"573","text":"570"},{"range":"574","text":"570"},"Update the dependencies array to be: [delId, handleDelete, history]",{"range":"575","text":"576"},{"range":"577","text":"570"},{"range":"578","text":"570"},{"range":"579","text":"570"},{"range":"580","text":"570"},[4710,4727],"[state.loading, state.details, state.results, state.user, children]",[1518,1520],"[handleGet, viewId]",[1947,1949],"[editId, handleGet]",[2514,2516],"[editId, handleCategory, handleGet]",[5219,5221],"[editId, fetchLocation, handleCategory, handleGet]",[1836,1838],[2507,2509],[1770,1772],[1795,1797],[2474,2476],[2100,2102],[1183,1185],"[fetchData]",[1328,1330],"[ctxResults, fetchData]",[2085,2087],[871,873],[1033,1035],[870,872],[1032,1034],[838,840],[982,984],[850,852],[1008,1010],[875,877],[1038,1040],[876,878],[1040,1042],[880,882],[1044,1046],[876,878],[1040,1042],[850,852],[1008,1010],[873,875],[1041,1043],[708,710],"[delId, handleDelete]",[704,706],[692,694],[696,698],[711,713],[832,834],"[delId, handleDelete, history]",[696,698],[712,714],[714,716],[712,714]]